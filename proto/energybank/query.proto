syntax = "proto3";
package chain4energy.c4echain.energybank;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "energybank/params.proto";
import "energybank/energy_token.proto";
import "energybank/token_params.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/chain4energy/c4e-chain/x/energybank/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/chain4energy/c4e-chain/energybank/params";
  }
  // Queries a list of EnergyTokenUserAddress items.
	rpc EnergyTokenUserAddress(QueryEnergyTokenUserAddressRequest) returns (QueryEnergyTokenUserAddressResponse) {
		option (google.api.http).get = "/chain4energy/c4e-chain/energybank/energy_token_user_address/{userAddress}";
	}

// Queries a list of CurrentBalance items.
	rpc CurrentBalance(QueryCurrentBalanceRequest) returns (QueryCurrentBalanceResponse) {
		option (google.api.http).get = "/chain4energy/c4e-chain/energybank/current_balance/{userAddress}/{tokenName}";
	}

// Queries a EnergyToken by id.
	rpc EnergyToken(QueryGetEnergyTokenRequest) returns (QueryGetEnergyTokenResponse) {
		option (google.api.http).get = "/chain4energy/c4e-chain/energybank/energy_token/{id}";
	}

	// Queries a list of EnergyToken items.
	rpc EnergyTokenAll(QueryAllEnergyTokenRequest) returns (QueryAllEnergyTokenResponse) {
		option (google.api.http).get = "/chain4energy/c4e-chain/energybank/energy_token";
	}

// Queries a TokenParams by index.
	rpc TokenParams(QueryGetTokenParamsRequest) returns (QueryGetTokenParamsResponse) {
		option (google.api.http).get = "/chain4energy/c4e-chain/energybank/token_params/{index}";
	}

	// Queries a list of TokenParams items.
	rpc TokenParamsAll(QueryAllTokenParamsRequest) returns (QueryAllTokenParamsResponse) {
		option (google.api.http).get = "/chain4energy/c4e-chain/energybank/token_params";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryEnergyTokenUserAddressRequest {
  string userAddress = 1;
}

message QueryEnergyTokenUserAddressResponse {
}

message QueryCurrentBalanceRequest {
  string userAddress = 1;
  string tokenName = 2;
}

message QueryCurrentBalanceResponse {
}

message QueryGetEnergyTokenRequest {
	uint64 id = 1;
}

message QueryGetEnergyTokenResponse {
	EnergyToken EnergyToken = 1 [(gogoproto.nullable) = false];
}

message QueryAllEnergyTokenRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllEnergyTokenResponse {
	repeated EnergyToken EnergyToken = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetTokenParamsRequest {
	  string index = 1;

}

message QueryGetTokenParamsResponse {
	TokenParams tokenParams = 1 [(gogoproto.nullable) = false];
}

message QueryAllTokenParamsRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllTokenParamsResponse {
	repeated TokenParams tokenParams = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
