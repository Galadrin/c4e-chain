// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cfeenergybank/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateTokenParams struct {
	Creator        string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TradingCompany string `protobuf:"bytes,3,opt,name=tradingCompany,proto3" json:"tradingCompany,omitempty"`
	BurningTime    uint64 `protobuf:"varint,4,opt,name=burningTime,proto3" json:"burningTime,omitempty"`
	BurningType    string `protobuf:"bytes,5,opt,name=burningType,proto3" json:"burningType,omitempty"`
	ExchangeRate   uint64 `protobuf:"varint,6,opt,name=exchangeRate,proto3" json:"exchangeRate,omitempty"`
	CommissionRate uint64 `protobuf:"varint,7,opt,name=commissionRate,proto3" json:"commissionRate,omitempty"`
}

func (m *MsgCreateTokenParams) Reset()         { *m = MsgCreateTokenParams{} }
func (m *MsgCreateTokenParams) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTokenParams) ProtoMessage()    {}
func (*MsgCreateTokenParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_4693e9c97ac500cc, []int{0}
}
func (m *MsgCreateTokenParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTokenParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTokenParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTokenParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTokenParams.Merge(m, src)
}
func (m *MsgCreateTokenParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTokenParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTokenParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTokenParams proto.InternalMessageInfo

func (m *MsgCreateTokenParams) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateTokenParams) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgCreateTokenParams) GetTradingCompany() string {
	if m != nil {
		return m.TradingCompany
	}
	return ""
}

func (m *MsgCreateTokenParams) GetBurningTime() uint64 {
	if m != nil {
		return m.BurningTime
	}
	return 0
}

func (m *MsgCreateTokenParams) GetBurningType() string {
	if m != nil {
		return m.BurningType
	}
	return ""
}

func (m *MsgCreateTokenParams) GetExchangeRate() uint64 {
	if m != nil {
		return m.ExchangeRate
	}
	return 0
}

func (m *MsgCreateTokenParams) GetCommissionRate() uint64 {
	if m != nil {
		return m.CommissionRate
	}
	return 0
}

type MsgCreateTokenParamsResponse struct {
}

func (m *MsgCreateTokenParamsResponse) Reset()         { *m = MsgCreateTokenParamsResponse{} }
func (m *MsgCreateTokenParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTokenParamsResponse) ProtoMessage()    {}
func (*MsgCreateTokenParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4693e9c97ac500cc, []int{1}
}
func (m *MsgCreateTokenParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTokenParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTokenParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTokenParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTokenParamsResponse.Merge(m, src)
}
func (m *MsgCreateTokenParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTokenParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTokenParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTokenParamsResponse proto.InternalMessageInfo

type MsgMintToken struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Amount      uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	UserAddress string `protobuf:"bytes,4,opt,name=userAddress,proto3" json:"userAddress,omitempty"`
}

func (m *MsgMintToken) Reset()         { *m = MsgMintToken{} }
func (m *MsgMintToken) String() string { return proto.CompactTextString(m) }
func (*MsgMintToken) ProtoMessage()    {}
func (*MsgMintToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_4693e9c97ac500cc, []int{2}
}
func (m *MsgMintToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintToken.Merge(m, src)
}
func (m *MsgMintToken) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintToken) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintToken.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintToken proto.InternalMessageInfo

func (m *MsgMintToken) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgMintToken) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgMintToken) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *MsgMintToken) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

type MsgMintTokenResponse struct {
}

func (m *MsgMintTokenResponse) Reset()         { *m = MsgMintTokenResponse{} }
func (m *MsgMintTokenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMintTokenResponse) ProtoMessage()    {}
func (*MsgMintTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4693e9c97ac500cc, []int{3}
}
func (m *MsgMintTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintTokenResponse.Merge(m, src)
}
func (m *MsgMintTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintTokenResponse proto.InternalMessageInfo

type MsgTransferTokens struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	AddressFrom string `protobuf:"bytes,2,opt,name=addressFrom,proto3" json:"addressFrom,omitempty"`
	AddressTo   string `protobuf:"bytes,3,opt,name=addressTo,proto3" json:"addressTo,omitempty"`
	Amount      uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	TokenId     uint64 `protobuf:"varint,5,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
}

func (m *MsgTransferTokens) Reset()         { *m = MsgTransferTokens{} }
func (m *MsgTransferTokens) String() string { return proto.CompactTextString(m) }
func (*MsgTransferTokens) ProtoMessage()    {}
func (*MsgTransferTokens) Descriptor() ([]byte, []int) {
	return fileDescriptor_4693e9c97ac500cc, []int{4}
}
func (m *MsgTransferTokens) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferTokens) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferTokens.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferTokens) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferTokens.Merge(m, src)
}
func (m *MsgTransferTokens) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferTokens) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferTokens.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferTokens proto.InternalMessageInfo

func (m *MsgTransferTokens) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTransferTokens) GetAddressFrom() string {
	if m != nil {
		return m.AddressFrom
	}
	return ""
}

func (m *MsgTransferTokens) GetAddressTo() string {
	if m != nil {
		return m.AddressTo
	}
	return ""
}

func (m *MsgTransferTokens) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *MsgTransferTokens) GetTokenId() uint64 {
	if m != nil {
		return m.TokenId
	}
	return 0
}

type MsgTransferTokensResponse struct {
}

func (m *MsgTransferTokensResponse) Reset()         { *m = MsgTransferTokensResponse{} }
func (m *MsgTransferTokensResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransferTokensResponse) ProtoMessage()    {}
func (*MsgTransferTokensResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4693e9c97ac500cc, []int{5}
}
func (m *MsgTransferTokensResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferTokensResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferTokensResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferTokensResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferTokensResponse.Merge(m, src)
}
func (m *MsgTransferTokensResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferTokensResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferTokensResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferTokensResponse proto.InternalMessageInfo

type MsgTransferTokensOptimally struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	AddressFrom string `protobuf:"bytes,2,opt,name=addressFrom,proto3" json:"addressFrom,omitempty"`
	AddressTo   string `protobuf:"bytes,3,opt,name=addressTo,proto3" json:"addressTo,omitempty"`
	Amount      uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	TokenName   string `protobuf:"bytes,5,opt,name=tokenName,proto3" json:"tokenName,omitempty"`
}

func (m *MsgTransferTokensOptimally) Reset()         { *m = MsgTransferTokensOptimally{} }
func (m *MsgTransferTokensOptimally) String() string { return proto.CompactTextString(m) }
func (*MsgTransferTokensOptimally) ProtoMessage()    {}
func (*MsgTransferTokensOptimally) Descriptor() ([]byte, []int) {
	return fileDescriptor_4693e9c97ac500cc, []int{6}
}
func (m *MsgTransferTokensOptimally) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferTokensOptimally) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferTokensOptimally.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferTokensOptimally) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferTokensOptimally.Merge(m, src)
}
func (m *MsgTransferTokensOptimally) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferTokensOptimally) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferTokensOptimally.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferTokensOptimally proto.InternalMessageInfo

func (m *MsgTransferTokensOptimally) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTransferTokensOptimally) GetAddressFrom() string {
	if m != nil {
		return m.AddressFrom
	}
	return ""
}

func (m *MsgTransferTokensOptimally) GetAddressTo() string {
	if m != nil {
		return m.AddressTo
	}
	return ""
}

func (m *MsgTransferTokensOptimally) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *MsgTransferTokensOptimally) GetTokenName() string {
	if m != nil {
		return m.TokenName
	}
	return ""
}

type MsgTransferTokensOptimallyResponse struct {
}

func (m *MsgTransferTokensOptimallyResponse) Reset()         { *m = MsgTransferTokensOptimallyResponse{} }
func (m *MsgTransferTokensOptimallyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransferTokensOptimallyResponse) ProtoMessage()    {}
func (*MsgTransferTokensOptimallyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4693e9c97ac500cc, []int{7}
}
func (m *MsgTransferTokensOptimallyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferTokensOptimallyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferTokensOptimallyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferTokensOptimallyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferTokensOptimallyResponse.Merge(m, src)
}
func (m *MsgTransferTokensOptimallyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferTokensOptimallyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferTokensOptimallyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferTokensOptimallyResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateTokenParams)(nil), "chain4energy.c4echain.cfeenergybank.MsgCreateTokenParams")
	proto.RegisterType((*MsgCreateTokenParamsResponse)(nil), "chain4energy.c4echain.cfeenergybank.MsgCreateTokenParamsResponse")
	proto.RegisterType((*MsgMintToken)(nil), "chain4energy.c4echain.cfeenergybank.MsgMintToken")
	proto.RegisterType((*MsgMintTokenResponse)(nil), "chain4energy.c4echain.cfeenergybank.MsgMintTokenResponse")
	proto.RegisterType((*MsgTransferTokens)(nil), "chain4energy.c4echain.cfeenergybank.MsgTransferTokens")
	proto.RegisterType((*MsgTransferTokensResponse)(nil), "chain4energy.c4echain.cfeenergybank.MsgTransferTokensResponse")
	proto.RegisterType((*MsgTransferTokensOptimally)(nil), "chain4energy.c4echain.cfeenergybank.MsgTransferTokensOptimally")
	proto.RegisterType((*MsgTransferTokensOptimallyResponse)(nil), "chain4energy.c4echain.cfeenergybank.MsgTransferTokensOptimallyResponse")
}

func init() { proto.RegisterFile("cfeenergybank/tx.proto", fileDescriptor_4693e9c97ac500cc) }

var fileDescriptor_4693e9c97ac500cc = []byte{
	// 541 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xee, 0x52, 0x93, 0x28, 0xd3, 0xaa, 0x52, 0x2d, 0x14, 0x4c, 0x88, 0xac, 0xc8, 0x20, 0xd4,
	0x0b, 0x8e, 0x80, 0x08, 0xd4, 0x0b, 0xa8, 0x54, 0x02, 0x71, 0x08, 0x3f, 0x56, 0x4e, 0xdc, 0x36,
	0xce, 0xd4, 0xb1, 0xda, 0xdd, 0xb5, 0x76, 0x37, 0x28, 0x7e, 0x03, 0x8e, 0xf0, 0x04, 0x1c, 0xb8,
	0xf2, 0x1a, 0x48, 0x1c, 0x7b, 0xe4, 0x88, 0x92, 0xd7, 0xe0, 0x80, 0xb2, 0x89, 0x1d, 0x27, 0x69,
	0x51, 0x1a, 0x0e, 0xdc, 0x3c, 0xdf, 0xcc, 0x7c, 0xf3, 0xcd, 0x8f, 0xb5, 0x50, 0x0d, 0x4f, 0x10,
	0x39, 0xca, 0x28, 0xed, 0x52, 0x7e, 0xda, 0xd4, 0x43, 0x3f, 0x91, 0x42, 0x0b, 0xfb, 0x4e, 0xd8,
	0xa7, 0x31, 0x6f, 0x4d, 0x5d, 0x7e, 0xd8, 0x42, 0x63, 0xfb, 0x0b, 0xd1, 0xde, 0x6f, 0x02, 0x37,
	0xda, 0x2a, 0x3a, 0x96, 0x48, 0x35, 0x76, 0xc4, 0x29, 0xf2, 0xb7, 0x54, 0x52, 0xa6, 0x6c, 0x07,
	0xca, 0xe1, 0x04, 0x14, 0xd2, 0x21, 0x0d, 0x72, 0x50, 0x09, 0x32, 0xd3, 0xb6, 0xc1, 0xe2, 0x94,
	0xa1, 0x73, 0xcd, 0xc0, 0xe6, 0xdb, 0xbe, 0x07, 0x7b, 0x5a, 0xd2, 0x5e, 0xcc, 0xa3, 0x63, 0xc1,
	0x12, 0xca, 0x53, 0x67, 0xdb, 0x78, 0x97, 0x50, 0xbb, 0x01, 0x3b, 0xdd, 0x81, 0xe4, 0x31, 0x8f,
	0x3a, 0x31, 0x43, 0xc7, 0x6a, 0x90, 0x03, 0x2b, 0x28, 0x42, 0xc5, 0x88, 0x34, 0x41, 0xe7, 0xba,
	0xa1, 0x29, 0x42, 0xb6, 0x07, 0xbb, 0x38, 0x0c, 0xfb, 0x94, 0x47, 0x18, 0x50, 0x8d, 0x4e, 0xc9,
	0x90, 0x2c, 0x60, 0x13, 0x3d, 0xa1, 0x60, 0x2c, 0x56, 0x2a, 0x16, 0xdc, 0x44, 0x95, 0x4d, 0xd4,
	0x12, 0xea, 0xb9, 0x50, 0xbf, 0xa8, 0xfb, 0x00, 0x55, 0x22, 0xb8, 0x42, 0xef, 0x03, 0xec, 0xb6,
	0x55, 0xd4, 0x8e, 0xb9, 0x36, 0xde, 0x2b, 0x4e, 0xa5, 0x0a, 0x25, 0xca, 0xc4, 0x80, 0x6b, 0x33,
	0x0d, 0x2b, 0x98, 0x59, 0x93, 0x1e, 0x07, 0x0a, 0xe5, 0x51, 0xaf, 0x27, 0x51, 0x29, 0x33, 0x85,
	0x4a, 0x50, 0x84, 0xbc, 0xaa, 0xd9, 0x4a, 0x5e, 0x37, 0xd7, 0xf3, 0x85, 0xc0, 0x7e, 0x5b, 0x45,
	0x1d, 0x49, 0xb9, 0x3a, 0x41, 0x69, 0x9c, 0x7f, 0xdb, 0x55, 0x03, 0x76, 0xe8, 0x94, 0xf2, 0x85,
	0x14, 0x6c, 0x26, 0xae, 0x08, 0xd9, 0x75, 0xa8, 0xcc, 0xcc, 0x8e, 0x98, 0x2d, 0x6d, 0x0e, 0x14,
	0x3a, 0xb0, 0x16, 0x3a, 0x70, 0xa0, 0xac, 0x27, 0xb5, 0x5f, 0xf5, 0xcc, 0x86, 0xac, 0x20, 0x33,
	0xbd, 0xdb, 0x70, 0x6b, 0x45, 0x60, 0x2e, 0xff, 0x1b, 0x81, 0xda, 0x8a, 0xf7, 0x4d, 0xa2, 0x63,
	0x46, 0xcf, 0xce, 0xd2, 0xff, 0xd0, 0x47, 0x1d, 0x2a, 0x46, 0xf8, 0xeb, 0xc9, 0xea, 0xa6, 0xb7,
	0x36, 0x07, 0xbc, 0xbb, 0xe0, 0x5d, 0xae, 0x36, 0x6b, 0xea, 0xe1, 0x77, 0x0b, 0xb6, 0xdb, 0x2a,
	0xb2, 0x3f, 0x13, 0xd8, 0x5f, 0xfd, 0x8f, 0x0e, 0xfd, 0x35, 0x7e, 0x43, 0xff, 0xa2, 0x23, 0xac,
	0x1d, 0x6d, 0x9c, 0x9a, 0x69, 0xb3, 0x53, 0xa8, 0xcc, 0x8f, 0xf7, 0xc1, 0xba, 0x7c, 0x79, 0x4a,
	0xed, 0xf0, 0xca, 0x29, 0x79, 0xe9, 0x8f, 0x04, 0xf6, 0x96, 0xee, 0xf4, 0xf1, 0xba, 0x6c, 0x8b,
	0x79, 0xb5, 0xa7, 0x9b, 0xe5, 0xe5, 0x52, 0xbe, 0x12, 0xb8, 0x79, 0xd9, 0xcd, 0x3d, 0xdb, 0x8c,
	0x3b, 0x27, 0xa8, 0xbd, 0xfc, 0x47, 0x82, 0x4c, 0xe5, 0xf3, 0x77, 0x3f, 0x46, 0x2e, 0x39, 0x1f,
	0xb9, 0xe4, 0xd7, 0xc8, 0x25, 0x9f, 0xc6, 0xee, 0xd6, 0xf9, 0xd8, 0xdd, 0xfa, 0x39, 0x76, 0xb7,
	0xde, 0x3f, 0x89, 0x62, 0xdd, 0x1f, 0x74, 0xfd, 0x50, 0xb0, 0x66, 0xb1, 0x58, 0x33, 0x6c, 0xe1,
	0x7d, 0x03, 0x34, 0x87, 0xcd, 0xa5, 0x57, 0x20, 0x4d, 0x50, 0x75, 0x4b, 0xe6, 0x25, 0x78, 0xf4,
	0x27, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x30, 0x1a, 0xde, 0x23, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateTokenParams(ctx context.Context, in *MsgCreateTokenParams, opts ...grpc.CallOption) (*MsgCreateTokenParamsResponse, error)
	MintToken(ctx context.Context, in *MsgMintToken, opts ...grpc.CallOption) (*MsgMintTokenResponse, error)
	TransferTokens(ctx context.Context, in *MsgTransferTokens, opts ...grpc.CallOption) (*MsgTransferTokensResponse, error)
	TransferTokensOptimally(ctx context.Context, in *MsgTransferTokensOptimally, opts ...grpc.CallOption) (*MsgTransferTokensOptimallyResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateTokenParams(ctx context.Context, in *MsgCreateTokenParams, opts ...grpc.CallOption) (*MsgCreateTokenParamsResponse, error) {
	out := new(MsgCreateTokenParamsResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfeenergybank.Msg/CreateTokenParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MintToken(ctx context.Context, in *MsgMintToken, opts ...grpc.CallOption) (*MsgMintTokenResponse, error) {
	out := new(MsgMintTokenResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfeenergybank.Msg/MintToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferTokens(ctx context.Context, in *MsgTransferTokens, opts ...grpc.CallOption) (*MsgTransferTokensResponse, error) {
	out := new(MsgTransferTokensResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfeenergybank.Msg/TransferTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferTokensOptimally(ctx context.Context, in *MsgTransferTokensOptimally, opts ...grpc.CallOption) (*MsgTransferTokensOptimallyResponse, error) {
	out := new(MsgTransferTokensOptimallyResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfeenergybank.Msg/TransferTokensOptimally", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateTokenParams(context.Context, *MsgCreateTokenParams) (*MsgCreateTokenParamsResponse, error)
	MintToken(context.Context, *MsgMintToken) (*MsgMintTokenResponse, error)
	TransferTokens(context.Context, *MsgTransferTokens) (*MsgTransferTokensResponse, error)
	TransferTokensOptimally(context.Context, *MsgTransferTokensOptimally) (*MsgTransferTokensOptimallyResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateTokenParams(ctx context.Context, req *MsgCreateTokenParams) (*MsgCreateTokenParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTokenParams not implemented")
}
func (*UnimplementedMsgServer) MintToken(ctx context.Context, req *MsgMintToken) (*MsgMintTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintToken not implemented")
}
func (*UnimplementedMsgServer) TransferTokens(ctx context.Context, req *MsgTransferTokens) (*MsgTransferTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferTokens not implemented")
}
func (*UnimplementedMsgServer) TransferTokensOptimally(ctx context.Context, req *MsgTransferTokensOptimally) (*MsgTransferTokensOptimallyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferTokensOptimally not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateTokenParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateTokenParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateTokenParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfeenergybank.Msg/CreateTokenParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateTokenParams(ctx, req.(*MsgCreateTokenParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MintToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMintToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MintToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfeenergybank.Msg/MintToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MintToken(ctx, req.(*MsgMintToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferTokens)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfeenergybank.Msg/TransferTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferTokens(ctx, req.(*MsgTransferTokens))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferTokensOptimally_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferTokensOptimally)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferTokensOptimally(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfeenergybank.Msg/TransferTokensOptimally",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferTokensOptimally(ctx, req.(*MsgTransferTokensOptimally))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chain4energy.c4echain.cfeenergybank.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTokenParams",
			Handler:    _Msg_CreateTokenParams_Handler,
		},
		{
			MethodName: "MintToken",
			Handler:    _Msg_MintToken_Handler,
		},
		{
			MethodName: "TransferTokens",
			Handler:    _Msg_TransferTokens_Handler,
		},
		{
			MethodName: "TransferTokensOptimally",
			Handler:    _Msg_TransferTokensOptimally_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cfeenergybank/tx.proto",
}

func (m *MsgCreateTokenParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTokenParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTokenParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CommissionRate != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CommissionRate))
		i--
		dAtA[i] = 0x38
	}
	if m.ExchangeRate != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExchangeRate))
		i--
		dAtA[i] = 0x30
	}
	if len(m.BurningType) > 0 {
		i -= len(m.BurningType)
		copy(dAtA[i:], m.BurningType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BurningType)))
		i--
		dAtA[i] = 0x2a
	}
	if m.BurningTime != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BurningTime))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TradingCompany) > 0 {
		i -= len(m.TradingCompany)
		copy(dAtA[i:], m.TradingCompany)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradingCompany)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateTokenParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTokenParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTokenParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMintToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMintTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTransferTokens) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferTokens) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferTokens) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TokenId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TokenId))
		i--
		dAtA[i] = 0x28
	}
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.AddressTo) > 0 {
		i -= len(m.AddressTo)
		copy(dAtA[i:], m.AddressTo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AddressTo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AddressFrom) > 0 {
		i -= len(m.AddressFrom)
		copy(dAtA[i:], m.AddressFrom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AddressFrom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransferTokensResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferTokensResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferTokensResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTransferTokensOptimally) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferTokensOptimally) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferTokensOptimally) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenName) > 0 {
		i -= len(m.TokenName)
		copy(dAtA[i:], m.TokenName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.AddressTo) > 0 {
		i -= len(m.AddressTo)
		copy(dAtA[i:], m.AddressTo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AddressTo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AddressFrom) > 0 {
		i -= len(m.AddressFrom)
		copy(dAtA[i:], m.AddressFrom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AddressFrom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransferTokensOptimallyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferTokensOptimallyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferTokensOptimallyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateTokenParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradingCompany)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BurningTime != 0 {
		n += 1 + sovTx(uint64(m.BurningTime))
	}
	l = len(m.BurningType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ExchangeRate != 0 {
		n += 1 + sovTx(uint64(m.ExchangeRate))
	}
	if m.CommissionRate != 0 {
		n += 1 + sovTx(uint64(m.CommissionRate))
	}
	return n
}

func (m *MsgCreateTokenParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMintToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMintTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTransferTokens) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AddressFrom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AddressTo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	if m.TokenId != 0 {
		n += 1 + sovTx(uint64(m.TokenId))
	}
	return n
}

func (m *MsgTransferTokensResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTransferTokensOptimally) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AddressFrom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AddressTo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	l = len(m.TokenName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTransferTokensOptimallyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateTokenParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTokenParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTokenParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingCompany", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingCompany = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurningTime", wireType)
			}
			m.BurningTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BurningTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurningType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BurningType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRate", wireType)
			}
			m.ExchangeRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExchangeRate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRate", wireType)
			}
			m.CommissionRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommissionRate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateTokenParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTokenParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTokenParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferTokens) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferTokens: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferTokens: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressFrom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressFrom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			m.TokenId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferTokensResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferTokensResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferTokensResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferTokensOptimally) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferTokensOptimally: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferTokensOptimally: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressFrom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressFrom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferTokensOptimallyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferTokensOptimallyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferTokensOptimallyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
