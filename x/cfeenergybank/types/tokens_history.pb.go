// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cfeenergybank/tokens_history.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TokensHistory struct {
	Id            uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserAddress   string `protobuf:"bytes,2,opt,name=userAddress,proto3" json:"userAddress,omitempty"`
	CreatedAt     uint64 `protobuf:"varint,3,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	IssuerAddress string `protobuf:"bytes,4,opt,name=issuerAddress,proto3" json:"issuerAddress,omitempty"`
	TargetAddress string `protobuf:"bytes,5,opt,name=targetAddress,proto3" json:"targetAddress,omitempty"`
	Amount        uint64 `protobuf:"varint,6,opt,name=amount,proto3" json:"amount,omitempty"`
	TokenName     string `protobuf:"bytes,7,opt,name=tokenName,proto3" json:"tokenName,omitempty"`
	OperationType string `protobuf:"bytes,8,opt,name=operationType,proto3" json:"operationType,omitempty"`
}

func (m *TokensHistory) Reset()         { *m = TokensHistory{} }
func (m *TokensHistory) String() string { return proto.CompactTextString(m) }
func (*TokensHistory) ProtoMessage()    {}
func (*TokensHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_b39c2894bfbec423, []int{0}
}
func (m *TokensHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokensHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokensHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokensHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokensHistory.Merge(m, src)
}
func (m *TokensHistory) XXX_Size() int {
	return m.Size()
}
func (m *TokensHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_TokensHistory.DiscardUnknown(m)
}

var xxx_messageInfo_TokensHistory proto.InternalMessageInfo

func (m *TokensHistory) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TokensHistory) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *TokensHistory) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *TokensHistory) GetIssuerAddress() string {
	if m != nil {
		return m.IssuerAddress
	}
	return ""
}

func (m *TokensHistory) GetTargetAddress() string {
	if m != nil {
		return m.TargetAddress
	}
	return ""
}

func (m *TokensHistory) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TokensHistory) GetTokenName() string {
	if m != nil {
		return m.TokenName
	}
	return ""
}

func (m *TokensHistory) GetOperationType() string {
	if m != nil {
		return m.OperationType
	}
	return ""
}

func init() {
	proto.RegisterType((*TokensHistory)(nil), "chain4energy.c4echain.cfeenergybank.TokensHistory")
}

func init() {
	proto.RegisterFile("cfeenergybank/tokens_history.proto", fileDescriptor_b39c2894bfbec423)
}

var fileDescriptor_b39c2894bfbec423 = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0xeb, 0x50, 0x0a, 0x35, 0x2a, 0x83, 0x07, 0xe4, 0x01, 0x59, 0x55, 0x61, 0xe8, 0x42,
	0x32, 0x50, 0x89, 0xb9, 0x4c, 0x4c, 0x48, 0x54, 0x9d, 0x58, 0x90, 0xe3, 0x1c, 0x89, 0x55, 0xc5,
	0x8e, 0x6c, 0x47, 0x22, 0x4f, 0xc0, 0xca, 0x63, 0x31, 0x76, 0x64, 0x44, 0xc9, 0x8b, 0xa0, 0x38,
	0xa0, 0x34, 0x8c, 0xf7, 0xe9, 0xff, 0x7e, 0x5b, 0x77, 0x78, 0x21, 0x5e, 0x01, 0x14, 0x98, 0xb4,
	0x8a, 0xb9, 0xda, 0x45, 0x4e, 0xef, 0x40, 0xd9, 0x97, 0x4c, 0x5a, 0xa7, 0x4d, 0x15, 0x16, 0x46,
	0x3b, 0x4d, 0xae, 0x44, 0xc6, 0xa5, 0x5a, 0x75, 0xb1, 0x50, 0xac, 0xc0, 0xcf, 0xe1, 0xc0, 0x5c,
	0xbc, 0x07, 0x78, 0xb6, 0xf5, 0xf6, 0x43, 0x27, 0x93, 0x73, 0x1c, 0xc8, 0x84, 0xa2, 0x39, 0x5a,
	0x8e, 0x37, 0x81, 0x4c, 0xc8, 0x1c, 0x9f, 0x95, 0x16, 0xcc, 0x3a, 0x49, 0x0c, 0x58, 0x4b, 0x83,
	0x39, 0x5a, 0x4e, 0x37, 0x87, 0x88, 0x5c, 0xe2, 0xa9, 0x30, 0xc0, 0x1d, 0x24, 0x6b, 0x47, 0x8f,
	0xbc, 0xd8, 0x03, 0x72, 0x8d, 0x67, 0xd2, 0xda, 0xb2, 0x6f, 0x18, 0xfb, 0x86, 0x21, 0x6c, 0x53,
	0x8e, 0x9b, 0x14, 0xdc, 0x5f, 0xea, 0xb8, 0x4b, 0x0d, 0x20, 0xb9, 0xc0, 0x13, 0x9e, 0xeb, 0x52,
	0x39, 0x3a, 0xf1, 0xcf, 0xfc, 0x4e, 0xed, 0x0f, 0xfc, 0x0a, 0x1e, 0x79, 0x0e, 0xf4, 0xc4, 0x9b,
	0x3d, 0x68, 0xbb, 0x75, 0x01, 0x86, 0x3b, 0xa9, 0xd5, 0xb6, 0x2a, 0x80, 0x9e, 0x76, 0xdd, 0x03,
	0x78, 0xff, 0xf4, 0x59, 0x33, 0xb4, 0xaf, 0x19, 0xfa, 0xae, 0x19, 0xfa, 0x68, 0xd8, 0x68, 0xdf,
	0xb0, 0xd1, 0x57, 0xc3, 0x46, 0xcf, 0x77, 0xa9, 0x74, 0x59, 0x19, 0x87, 0x42, 0xe7, 0xd1, 0xe1,
	0x4e, 0x23, 0xb1, 0x82, 0x1b, 0x0f, 0xa2, 0xb7, 0xe8, 0xdf, 0x41, 0xaa, 0x02, 0x6c, 0x3c, 0xf1,
	0x87, 0xb8, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0x02, 0xcd, 0x49, 0x1b, 0xae, 0x01, 0x00, 0x00,
}

func (m *TokensHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokensHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokensHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperationType) > 0 {
		i -= len(m.OperationType)
		copy(dAtA[i:], m.OperationType)
		i = encodeVarintTokensHistory(dAtA, i, uint64(len(m.OperationType)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TokenName) > 0 {
		i -= len(m.TokenName)
		copy(dAtA[i:], m.TokenName)
		i = encodeVarintTokensHistory(dAtA, i, uint64(len(m.TokenName)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Amount != 0 {
		i = encodeVarintTokensHistory(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x30
	}
	if len(m.TargetAddress) > 0 {
		i -= len(m.TargetAddress)
		copy(dAtA[i:], m.TargetAddress)
		i = encodeVarintTokensHistory(dAtA, i, uint64(len(m.TargetAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.IssuerAddress) > 0 {
		i -= len(m.IssuerAddress)
		copy(dAtA[i:], m.IssuerAddress)
		i = encodeVarintTokensHistory(dAtA, i, uint64(len(m.IssuerAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.CreatedAt != 0 {
		i = encodeVarintTokensHistory(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x18
	}
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintTokensHistory(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTokensHistory(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTokensHistory(dAtA []byte, offset int, v uint64) int {
	offset -= sovTokensHistory(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TokensHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTokensHistory(uint64(m.Id))
	}
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovTokensHistory(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovTokensHistory(uint64(m.CreatedAt))
	}
	l = len(m.IssuerAddress)
	if l > 0 {
		n += 1 + l + sovTokensHistory(uint64(l))
	}
	l = len(m.TargetAddress)
	if l > 0 {
		n += 1 + l + sovTokensHistory(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTokensHistory(uint64(m.Amount))
	}
	l = len(m.TokenName)
	if l > 0 {
		n += 1 + l + sovTokensHistory(uint64(l))
	}
	l = len(m.OperationType)
	if l > 0 {
		n += 1 + l + sovTokensHistory(uint64(l))
	}
	return n
}

func sovTokensHistory(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTokensHistory(x uint64) (n int) {
	return sovTokensHistory(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TokensHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokensHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokensHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokensHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokensHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokensHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokensHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokensHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokensHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokensHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokensHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokensHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokensHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokensHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokensHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokensHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokensHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokensHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokensHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokensHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokensHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokensHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperationType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokensHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTokensHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTokensHistory(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTokensHistory
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokensHistory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokensHistory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTokensHistory
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTokensHistory
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTokensHistory
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTokensHistory        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTokensHistory          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTokensHistory = fmt.Errorf("proto: unexpected end of group")
)
