// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cferoutingdistributor/sub_distributor.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RoutingDistributor struct {
	//List contains distributors
	SubDistributor []*SubDistributor `protobuf:"bytes,1,rep,name=sub_distributor,json=subDistributor,proto3" json:"sub_distributor,omitempty"`
	//module account to load on start genesis
	ModuleAccounts []string `protobuf:"bytes,2,rep,name=module_accounts,json=moduleAccounts,proto3" json:"module_accounts,omitempty"`
}

func (m *RoutingDistributor) Reset()         { *m = RoutingDistributor{} }
func (m *RoutingDistributor) String() string { return proto.CompactTextString(m) }
func (*RoutingDistributor) ProtoMessage()    {}
func (*RoutingDistributor) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c639462a28accb4, []int{0}
}
func (m *RoutingDistributor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoutingDistributor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoutingDistributor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoutingDistributor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingDistributor.Merge(m, src)
}
func (m *RoutingDistributor) XXX_Size() int {
	return m.Size()
}
func (m *RoutingDistributor) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingDistributor.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingDistributor proto.InternalMessageInfo

func (m *RoutingDistributor) GetSubDistributor() []*SubDistributor {
	if m != nil {
		return m.SubDistributor
	}
	return nil
}

func (m *RoutingDistributor) GetModuleAccounts() []string {
	if m != nil {
		return m.ModuleAccounts
	}
	return nil
}

type SubDistributor struct {
	//represent list of module account from which
	Sources []string `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	//represent destinations
	Destination *Destination `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	Order       int32        `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"`
}

func (m *SubDistributor) Reset()         { *m = SubDistributor{} }
func (m *SubDistributor) String() string { return proto.CompactTextString(m) }
func (*SubDistributor) ProtoMessage()    {}
func (*SubDistributor) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c639462a28accb4, []int{1}
}
func (m *SubDistributor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubDistributor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubDistributor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubDistributor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubDistributor.Merge(m, src)
}
func (m *SubDistributor) XXX_Size() int {
	return m.Size()
}
func (m *SubDistributor) XXX_DiscardUnknown() {
	xxx_messageInfo_SubDistributor.DiscardUnknown(m)
}

var xxx_messageInfo_SubDistributor proto.InternalMessageInfo

func (m *SubDistributor) GetSources() []string {
	if m != nil {
		return m.Sources
	}
	return nil
}

func (m *SubDistributor) GetDestination() *Destination {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *SubDistributor) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

type Destination struct {
	DefaultShareAccount string   `protobuf:"bytes,1,opt,name=default_share_account,json=defaultShareAccount,proto3" json:"default_share_account,omitempty"`
	Share               []*Share `protobuf:"bytes,2,rep,name=share,proto3" json:"share,omitempty"`
	//can be null
	BurnShare int32 `protobuf:"varint,3,opt,name=burn_share,json=burnShare,proto3" json:"burn_share,omitempty"`
}

func (m *Destination) Reset()         { *m = Destination{} }
func (m *Destination) String() string { return proto.CompactTextString(m) }
func (*Destination) ProtoMessage()    {}
func (*Destination) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c639462a28accb4, []int{2}
}
func (m *Destination) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Destination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Destination.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Destination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Destination.Merge(m, src)
}
func (m *Destination) XXX_Size() int {
	return m.Size()
}
func (m *Destination) XXX_DiscardUnknown() {
	xxx_messageInfo_Destination.DiscardUnknown(m)
}

var xxx_messageInfo_Destination proto.InternalMessageInfo

func (m *Destination) GetDefaultShareAccount() string {
	if m != nil {
		return m.DefaultShareAccount
	}
	return ""
}

func (m *Destination) GetShare() []*Share {
	if m != nil {
		return m.Share
	}
	return nil
}

func (m *Destination) GetBurnShare() int32 {
	if m != nil {
		return m.BurnShare
	}
	return 0
}

type Share struct {
	Name    string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Percent int32    `protobuf:"varint,2,opt,name=percent,proto3" json:"percent,omitempty"`
	Account *Account `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *Share) Reset()         { *m = Share{} }
func (m *Share) String() string { return proto.CompactTextString(m) }
func (*Share) ProtoMessage()    {}
func (*Share) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c639462a28accb4, []int{3}
}
func (m *Share) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Share) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Share.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Share) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Share.Merge(m, src)
}
func (m *Share) XXX_Size() int {
	return m.Size()
}
func (m *Share) XXX_DiscardUnknown() {
	xxx_messageInfo_Share.DiscardUnknown(m)
}

var xxx_messageInfo_Share proto.InternalMessageInfo

func (m *Share) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Share) GetPercent() int32 {
	if m != nil {
		return m.Percent
	}
	return 0
}

func (m *Share) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

type Account struct {
	Address         string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	IsModuleAccount bool   `protobuf:"varint,2,opt,name=is_module_account,json=isModuleAccount,proto3" json:"is_module_account,omitempty"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c639462a28accb4, []int{4}
}
func (m *Account) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Account.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(m, src)
}
func (m *Account) XXX_Size() int {
	return m.Size()
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Account) GetIsModuleAccount() bool {
	if m != nil {
		return m.IsModuleAccount
	}
	return false
}

func init() {
	proto.RegisterType((*RoutingDistributor)(nil), "chain4energy.c4echain.cferoutingdistributor.RoutingDistributor")
	proto.RegisterType((*SubDistributor)(nil), "chain4energy.c4echain.cferoutingdistributor.SubDistributor")
	proto.RegisterType((*Destination)(nil), "chain4energy.c4echain.cferoutingdistributor.Destination")
	proto.RegisterType((*Share)(nil), "chain4energy.c4echain.cferoutingdistributor.Share")
	proto.RegisterType((*Account)(nil), "chain4energy.c4echain.cferoutingdistributor.account")
}

func init() {
	proto.RegisterFile("cferoutingdistributor/sub_distributor.proto", fileDescriptor_0c639462a28accb4)
}

var fileDescriptor_0c639462a28accb4 = []byte{
	// 464 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcf, 0x8a, 0xd4, 0x40,
	0x10, 0xc6, 0xa7, 0x77, 0x8c, 0xeb, 0x54, 0x60, 0x06, 0xdb, 0x15, 0xc2, 0x82, 0x21, 0xe4, 0x62,
	0x70, 0x31, 0x81, 0x38, 0x07, 0xc1, 0x83, 0x28, 0x7b, 0xf0, 0xa2, 0x42, 0xef, 0xc9, 0xbd, 0x0c,
	0x49, 0xa7, 0x37, 0xd3, 0xb0, 0xd3, 0x3d, 0xf4, 0x1f, 0x70, 0x1f, 0xc0, 0xbb, 0x0f, 0xe0, 0xcd,
	0x9b, 0x4f, 0xe2, 0x71, 0x8f, 0x1e, 0x65, 0xe6, 0x45, 0x24, 0x9d, 0x64, 0x37, 0x23, 0x73, 0x99,
	0x5b, 0x7f, 0xd5, 0x55, 0x5f, 0xfd, 0xaa, 0xe8, 0x86, 0x33, 0x7a, 0xc5, 0x94, 0xb4, 0x86, 0x8b,
	0xba, 0xe2, 0xda, 0x28, 0x5e, 0x5a, 0x23, 0x55, 0xa6, 0x6d, 0xb9, 0x18, 0xe8, 0x74, 0xad, 0xa4,
	0x91, 0xf8, 0x8c, 0x2e, 0x0b, 0x2e, 0xe6, 0x4c, 0x30, 0x55, 0xdf, 0xa4, 0x74, 0xce, 0x9c, 0x4e,
	0xf7, 0x5a, 0x9c, 0x9e, 0xd4, 0xb2, 0x96, 0xae, 0x2e, 0x6b, 0x4e, 0xad, 0xc5, 0x69, 0xbc, 0xbf,
	0xdf, 0xba, 0x50, 0xc5, 0x4a, 0xb7, 0x39, 0xf1, 0x4f, 0x04, 0x98, 0xb4, 0x39, 0xe7, 0xf7, 0x39,
	0xb8, 0x82, 0xd9, 0x7f, 0x58, 0x01, 0x8a, 0xc6, 0x89, 0x9f, 0xbf, 0x49, 0x0f, 0xe0, 0x4a, 0x2f,
	0x6c, 0x39, 0x70, 0x25, 0x53, 0xbd, 0xa3, 0xf1, 0x73, 0x98, 0xad, 0x64, 0x65, 0xaf, 0xd9, 0xa2,
	0xa0, 0x54, 0x5a, 0x61, 0x74, 0x70, 0x14, 0x8d, 0x93, 0x09, 0x99, 0xb6, 0xe1, 0x77, 0x5d, 0x34,
	0xfe, 0x81, 0x60, 0xba, 0xeb, 0x85, 0x03, 0x38, 0xd6, 0xd2, 0x2a, 0xca, 0xb4, 0x23, 0x9b, 0x90,
	0x5e, 0xe2, 0x4b, 0xf0, 0x2b, 0xa6, 0x0d, 0x17, 0x85, 0xe1, 0x52, 0x04, 0x47, 0x11, 0x4a, 0xfc,
	0xfc, 0xf5, 0x41, 0xdc, 0xe7, 0xf7, 0xf5, 0x64, 0x68, 0x86, 0x4f, 0xc0, 0x93, 0xaa, 0x62, 0x2a,
	0x18, 0x47, 0x28, 0xf1, 0x48, 0x2b, 0xe2, 0x5f, 0x08, 0xfc, 0x41, 0x09, 0xce, 0xe1, 0x69, 0xc5,
	0xae, 0x0a, 0x7b, 0x6d, 0x16, 0x7a, 0x59, 0xa8, 0xbb, 0xf1, 0x02, 0x14, 0xa1, 0x64, 0x42, 0x9e,
	0x74, 0x97, 0x17, 0xcd, 0x5d, 0x37, 0x23, 0xfe, 0x00, 0x9e, 0xcb, 0x75, 0x1b, 0xf0, 0xf3, 0xfc,
	0xb0, 0x3d, 0x37, 0x95, 0xa4, 0x35, 0xc0, 0xcf, 0x00, 0x4a, 0xab, 0x44, 0xdb, 0xba, 0x03, 0x9d,
	0x34, 0x11, 0x97, 0x15, 0x7f, 0x43, 0xe0, 0xb9, 0x13, 0xc6, 0xf0, 0x40, 0x14, 0x2b, 0xd6, 0x51,
	0xb9, 0x73, 0xb3, 0xd6, 0x35, 0x53, 0x94, 0x09, 0xe3, 0x16, 0xe7, 0x91, 0x5e, 0xe2, 0x4f, 0x70,
	0xdc, 0x8f, 0x31, 0x76, 0x2b, 0x9d, 0x1f, 0x84, 0xd8, 0xd5, 0x92, 0xde, 0x24, 0xfe, 0x7c, 0xe7,
	0xd7, 0x34, 0x2d, 0xaa, 0x4a, 0x31, 0xad, 0x3b, 0x96, 0x5e, 0xe2, 0x17, 0xf0, 0x98, 0xeb, 0xc5,
	0xee, 0x23, 0x71, 0x60, 0x8f, 0xc8, 0x8c, 0xeb, 0x8f, 0xc3, 0x57, 0xf2, 0xfe, 0xcb, 0xef, 0x4d,
	0x88, 0x6e, 0x37, 0x21, 0xfa, 0xbb, 0x09, 0xd1, 0xf7, 0x6d, 0x38, 0xba, 0xdd, 0x86, 0xa3, 0x3f,
	0xdb, 0x70, 0x74, 0xf9, 0xb6, 0xe6, 0x66, 0x69, 0xcb, 0x94, 0xca, 0x55, 0x36, 0x64, 0xce, 0xe8,
	0x9c, 0xbd, 0x74, 0x81, 0xec, 0x6b, 0xb6, 0xff, 0xb3, 0x98, 0x9b, 0x35, 0xd3, 0xe5, 0x43, 0xf7,
	0x59, 0x5e, 0xfd, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xc8, 0x8e, 0x11, 0xab, 0xc2, 0x03, 0x00, 0x00,
}

func (m *RoutingDistributor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoutingDistributor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoutingDistributor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ModuleAccounts) > 0 {
		for iNdEx := len(m.ModuleAccounts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ModuleAccounts[iNdEx])
			copy(dAtA[i:], m.ModuleAccounts[iNdEx])
			i = encodeVarintSubDistributor(dAtA, i, uint64(len(m.ModuleAccounts[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SubDistributor) > 0 {
		for iNdEx := len(m.SubDistributor) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubDistributor[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSubDistributor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SubDistributor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubDistributor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubDistributor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Order != 0 {
		i = encodeVarintSubDistributor(dAtA, i, uint64(m.Order))
		i--
		dAtA[i] = 0x18
	}
	if m.Destination != nil {
		{
			size, err := m.Destination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSubDistributor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sources) > 0 {
		for iNdEx := len(m.Sources) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Sources[iNdEx])
			copy(dAtA[i:], m.Sources[iNdEx])
			i = encodeVarintSubDistributor(dAtA, i, uint64(len(m.Sources[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Destination) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Destination) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Destination) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BurnShare != 0 {
		i = encodeVarintSubDistributor(dAtA, i, uint64(m.BurnShare))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Share) > 0 {
		for iNdEx := len(m.Share) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Share[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSubDistributor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.DefaultShareAccount) > 0 {
		i -= len(m.DefaultShareAccount)
		copy(dAtA[i:], m.DefaultShareAccount)
		i = encodeVarintSubDistributor(dAtA, i, uint64(len(m.DefaultShareAccount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Share) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Share) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Share) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSubDistributor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Percent != 0 {
		i = encodeVarintSubDistributor(dAtA, i, uint64(m.Percent))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSubDistributor(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Account) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Account) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Account) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsModuleAccount {
		i--
		if m.IsModuleAccount {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintSubDistributor(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSubDistributor(dAtA []byte, offset int, v uint64) int {
	offset -= sovSubDistributor(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RoutingDistributor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SubDistributor) > 0 {
		for _, e := range m.SubDistributor {
			l = e.Size()
			n += 1 + l + sovSubDistributor(uint64(l))
		}
	}
	if len(m.ModuleAccounts) > 0 {
		for _, s := range m.ModuleAccounts {
			l = len(s)
			n += 1 + l + sovSubDistributor(uint64(l))
		}
	}
	return n
}

func (m *SubDistributor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sources) > 0 {
		for _, s := range m.Sources {
			l = len(s)
			n += 1 + l + sovSubDistributor(uint64(l))
		}
	}
	if m.Destination != nil {
		l = m.Destination.Size()
		n += 1 + l + sovSubDistributor(uint64(l))
	}
	if m.Order != 0 {
		n += 1 + sovSubDistributor(uint64(m.Order))
	}
	return n
}

func (m *Destination) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DefaultShareAccount)
	if l > 0 {
		n += 1 + l + sovSubDistributor(uint64(l))
	}
	if len(m.Share) > 0 {
		for _, e := range m.Share {
			l = e.Size()
			n += 1 + l + sovSubDistributor(uint64(l))
		}
	}
	if m.BurnShare != 0 {
		n += 1 + sovSubDistributor(uint64(m.BurnShare))
	}
	return n
}

func (m *Share) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSubDistributor(uint64(l))
	}
	if m.Percent != 0 {
		n += 1 + sovSubDistributor(uint64(m.Percent))
	}
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovSubDistributor(uint64(l))
	}
	return n
}

func (m *Account) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovSubDistributor(uint64(l))
	}
	if m.IsModuleAccount {
		n += 2
	}
	return n
}

func sovSubDistributor(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSubDistributor(x uint64) (n int) {
	return sovSubDistributor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RoutingDistributor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubDistributor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoutingDistributor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoutingDistributor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubDistributor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubDistributor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubDistributor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubDistributor = append(m.SubDistributor, &SubDistributor{})
			if err := m.SubDistributor[len(m.SubDistributor)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleAccounts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubDistributor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubDistributor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleAccounts = append(m.ModuleAccounts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubDistributor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubDistributor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubDistributor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubDistributor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubDistributor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubDistributor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sources", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubDistributor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubDistributor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sources = append(m.Sources, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubDistributor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubDistributor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Destination == nil {
				m.Destination = &Destination{}
			}
			if err := m.Destination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSubDistributor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubDistributor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Destination) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubDistributor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Destination: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Destination: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultShareAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubDistributor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubDistributor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultShareAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubDistributor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubDistributor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Share = append(m.Share, &Share{})
			if err := m.Share[len(m.Share)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnShare", wireType)
			}
			m.BurnShare = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BurnShare |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSubDistributor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubDistributor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Share) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubDistributor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Share: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Share: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubDistributor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubDistributor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percent", wireType)
			}
			m.Percent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Percent |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubDistributor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubDistributor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubDistributor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubDistributor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Account) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubDistributor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: account: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: account: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubDistributor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubDistributor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsModuleAccount", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsModuleAccount = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSubDistributor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubDistributor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSubDistributor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSubDistributor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubDistributor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubDistributor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSubDistributor
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSubDistributor
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSubDistributor
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSubDistributor        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSubDistributor          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSubDistributor = fmt.Errorf("proto: unexpected end of group")
)
