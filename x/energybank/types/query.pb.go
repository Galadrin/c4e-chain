// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: energybank/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_804365b87934f4e4, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_804365b87934f4e4, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryEnergyTokenUserAddressRequest struct {
	UserAddress string `protobuf:"bytes,1,opt,name=userAddress,proto3" json:"userAddress,omitempty"`
}

func (m *QueryEnergyTokenUserAddressRequest) Reset()         { *m = QueryEnergyTokenUserAddressRequest{} }
func (m *QueryEnergyTokenUserAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEnergyTokenUserAddressRequest) ProtoMessage()    {}
func (*QueryEnergyTokenUserAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_804365b87934f4e4, []int{2}
}
func (m *QueryEnergyTokenUserAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEnergyTokenUserAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEnergyTokenUserAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEnergyTokenUserAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEnergyTokenUserAddressRequest.Merge(m, src)
}
func (m *QueryEnergyTokenUserAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEnergyTokenUserAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEnergyTokenUserAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEnergyTokenUserAddressRequest proto.InternalMessageInfo

func (m *QueryEnergyTokenUserAddressRequest) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

type QueryEnergyTokenUserAddressResponse struct {
}

func (m *QueryEnergyTokenUserAddressResponse) Reset()         { *m = QueryEnergyTokenUserAddressResponse{} }
func (m *QueryEnergyTokenUserAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEnergyTokenUserAddressResponse) ProtoMessage()    {}
func (*QueryEnergyTokenUserAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_804365b87934f4e4, []int{3}
}
func (m *QueryEnergyTokenUserAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEnergyTokenUserAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEnergyTokenUserAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEnergyTokenUserAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEnergyTokenUserAddressResponse.Merge(m, src)
}
func (m *QueryEnergyTokenUserAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEnergyTokenUserAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEnergyTokenUserAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEnergyTokenUserAddressResponse proto.InternalMessageInfo

type QueryCurrentBalanceRequest struct {
	UserAddress string `protobuf:"bytes,1,opt,name=userAddress,proto3" json:"userAddress,omitempty"`
	TokenName   string `protobuf:"bytes,2,opt,name=tokenName,proto3" json:"tokenName,omitempty"`
}

func (m *QueryCurrentBalanceRequest) Reset()         { *m = QueryCurrentBalanceRequest{} }
func (m *QueryCurrentBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCurrentBalanceRequest) ProtoMessage()    {}
func (*QueryCurrentBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_804365b87934f4e4, []int{4}
}
func (m *QueryCurrentBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCurrentBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCurrentBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCurrentBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCurrentBalanceRequest.Merge(m, src)
}
func (m *QueryCurrentBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCurrentBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCurrentBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCurrentBalanceRequest proto.InternalMessageInfo

func (m *QueryCurrentBalanceRequest) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *QueryCurrentBalanceRequest) GetTokenName() string {
	if m != nil {
		return m.TokenName
	}
	return ""
}

type QueryCurrentBalanceResponse struct {
}

func (m *QueryCurrentBalanceResponse) Reset()         { *m = QueryCurrentBalanceResponse{} }
func (m *QueryCurrentBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCurrentBalanceResponse) ProtoMessage()    {}
func (*QueryCurrentBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_804365b87934f4e4, []int{5}
}
func (m *QueryCurrentBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCurrentBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCurrentBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCurrentBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCurrentBalanceResponse.Merge(m, src)
}
func (m *QueryCurrentBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCurrentBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCurrentBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCurrentBalanceResponse proto.InternalMessageInfo

type QueryGetEnergyTokenRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetEnergyTokenRequest) Reset()         { *m = QueryGetEnergyTokenRequest{} }
func (m *QueryGetEnergyTokenRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEnergyTokenRequest) ProtoMessage()    {}
func (*QueryGetEnergyTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_804365b87934f4e4, []int{6}
}
func (m *QueryGetEnergyTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEnergyTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEnergyTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEnergyTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEnergyTokenRequest.Merge(m, src)
}
func (m *QueryGetEnergyTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEnergyTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEnergyTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEnergyTokenRequest proto.InternalMessageInfo

func (m *QueryGetEnergyTokenRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetEnergyTokenResponse struct {
	EnergyToken EnergyToken `protobuf:"bytes,1,opt,name=EnergyToken,proto3" json:"EnergyToken"`
}

func (m *QueryGetEnergyTokenResponse) Reset()         { *m = QueryGetEnergyTokenResponse{} }
func (m *QueryGetEnergyTokenResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEnergyTokenResponse) ProtoMessage()    {}
func (*QueryGetEnergyTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_804365b87934f4e4, []int{7}
}
func (m *QueryGetEnergyTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEnergyTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEnergyTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEnergyTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEnergyTokenResponse.Merge(m, src)
}
func (m *QueryGetEnergyTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEnergyTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEnergyTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEnergyTokenResponse proto.InternalMessageInfo

func (m *QueryGetEnergyTokenResponse) GetEnergyToken() EnergyToken {
	if m != nil {
		return m.EnergyToken
	}
	return EnergyToken{}
}

type QueryAllEnergyTokenRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllEnergyTokenRequest) Reset()         { *m = QueryAllEnergyTokenRequest{} }
func (m *QueryAllEnergyTokenRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllEnergyTokenRequest) ProtoMessage()    {}
func (*QueryAllEnergyTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_804365b87934f4e4, []int{8}
}
func (m *QueryAllEnergyTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEnergyTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEnergyTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEnergyTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEnergyTokenRequest.Merge(m, src)
}
func (m *QueryAllEnergyTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEnergyTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEnergyTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEnergyTokenRequest proto.InternalMessageInfo

func (m *QueryAllEnergyTokenRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllEnergyTokenResponse struct {
	EnergyToken []EnergyToken       `protobuf:"bytes,1,rep,name=EnergyToken,proto3" json:"EnergyToken"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllEnergyTokenResponse) Reset()         { *m = QueryAllEnergyTokenResponse{} }
func (m *QueryAllEnergyTokenResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllEnergyTokenResponse) ProtoMessage()    {}
func (*QueryAllEnergyTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_804365b87934f4e4, []int{9}
}
func (m *QueryAllEnergyTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEnergyTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEnergyTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEnergyTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEnergyTokenResponse.Merge(m, src)
}
func (m *QueryAllEnergyTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEnergyTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEnergyTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEnergyTokenResponse proto.InternalMessageInfo

func (m *QueryAllEnergyTokenResponse) GetEnergyToken() []EnergyToken {
	if m != nil {
		return m.EnergyToken
	}
	return nil
}

func (m *QueryAllEnergyTokenResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTokenParamsRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetTokenParamsRequest) Reset()         { *m = QueryGetTokenParamsRequest{} }
func (m *QueryGetTokenParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokenParamsRequest) ProtoMessage()    {}
func (*QueryGetTokenParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_804365b87934f4e4, []int{10}
}
func (m *QueryGetTokenParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokenParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokenParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokenParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokenParamsRequest.Merge(m, src)
}
func (m *QueryGetTokenParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokenParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokenParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokenParamsRequest proto.InternalMessageInfo

func (m *QueryGetTokenParamsRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetTokenParamsResponse struct {
	TokenParams TokenParams `protobuf:"bytes,1,opt,name=tokenParams,proto3" json:"tokenParams"`
}

func (m *QueryGetTokenParamsResponse) Reset()         { *m = QueryGetTokenParamsResponse{} }
func (m *QueryGetTokenParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokenParamsResponse) ProtoMessage()    {}
func (*QueryGetTokenParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_804365b87934f4e4, []int{11}
}
func (m *QueryGetTokenParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokenParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokenParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokenParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokenParamsResponse.Merge(m, src)
}
func (m *QueryGetTokenParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokenParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokenParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokenParamsResponse proto.InternalMessageInfo

func (m *QueryGetTokenParamsResponse) GetTokenParams() TokenParams {
	if m != nil {
		return m.TokenParams
	}
	return TokenParams{}
}

type QueryAllTokenParamsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTokenParamsRequest) Reset()         { *m = QueryAllTokenParamsRequest{} }
func (m *QueryAllTokenParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTokenParamsRequest) ProtoMessage()    {}
func (*QueryAllTokenParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_804365b87934f4e4, []int{12}
}
func (m *QueryAllTokenParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTokenParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTokenParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTokenParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTokenParamsRequest.Merge(m, src)
}
func (m *QueryAllTokenParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTokenParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTokenParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTokenParamsRequest proto.InternalMessageInfo

func (m *QueryAllTokenParamsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTokenParamsResponse struct {
	TokenParams []TokenParams       `protobuf:"bytes,1,rep,name=tokenParams,proto3" json:"tokenParams"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTokenParamsResponse) Reset()         { *m = QueryAllTokenParamsResponse{} }
func (m *QueryAllTokenParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTokenParamsResponse) ProtoMessage()    {}
func (*QueryAllTokenParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_804365b87934f4e4, []int{13}
}
func (m *QueryAllTokenParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTokenParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTokenParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTokenParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTokenParamsResponse.Merge(m, src)
}
func (m *QueryAllTokenParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTokenParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTokenParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTokenParamsResponse proto.InternalMessageInfo

func (m *QueryAllTokenParamsResponse) GetTokenParams() []TokenParams {
	if m != nil {
		return m.TokenParams
	}
	return nil
}

func (m *QueryAllTokenParamsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "chain4energy.c4echain.energybank.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "chain4energy.c4echain.energybank.QueryParamsResponse")
	proto.RegisterType((*QueryEnergyTokenUserAddressRequest)(nil), "chain4energy.c4echain.energybank.QueryEnergyTokenUserAddressRequest")
	proto.RegisterType((*QueryEnergyTokenUserAddressResponse)(nil), "chain4energy.c4echain.energybank.QueryEnergyTokenUserAddressResponse")
	proto.RegisterType((*QueryCurrentBalanceRequest)(nil), "chain4energy.c4echain.energybank.QueryCurrentBalanceRequest")
	proto.RegisterType((*QueryCurrentBalanceResponse)(nil), "chain4energy.c4echain.energybank.QueryCurrentBalanceResponse")
	proto.RegisterType((*QueryGetEnergyTokenRequest)(nil), "chain4energy.c4echain.energybank.QueryGetEnergyTokenRequest")
	proto.RegisterType((*QueryGetEnergyTokenResponse)(nil), "chain4energy.c4echain.energybank.QueryGetEnergyTokenResponse")
	proto.RegisterType((*QueryAllEnergyTokenRequest)(nil), "chain4energy.c4echain.energybank.QueryAllEnergyTokenRequest")
	proto.RegisterType((*QueryAllEnergyTokenResponse)(nil), "chain4energy.c4echain.energybank.QueryAllEnergyTokenResponse")
	proto.RegisterType((*QueryGetTokenParamsRequest)(nil), "chain4energy.c4echain.energybank.QueryGetTokenParamsRequest")
	proto.RegisterType((*QueryGetTokenParamsResponse)(nil), "chain4energy.c4echain.energybank.QueryGetTokenParamsResponse")
	proto.RegisterType((*QueryAllTokenParamsRequest)(nil), "chain4energy.c4echain.energybank.QueryAllTokenParamsRequest")
	proto.RegisterType((*QueryAllTokenParamsResponse)(nil), "chain4energy.c4echain.energybank.QueryAllTokenParamsResponse")
}

func init() { proto.RegisterFile("energybank/query.proto", fileDescriptor_804365b87934f4e4) }

var fileDescriptor_804365b87934f4e4 = []byte{
	// 776 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xdd, 0x4e, 0x13, 0x41,
	0x14, 0xee, 0x96, 0x9f, 0x84, 0x69, 0xc2, 0xc5, 0x48, 0x90, 0x54, 0xa8, 0x64, 0x8c, 0x8a, 0x3f,
	0xec, 0xa4, 0x58, 0x25, 0x26, 0x18, 0x03, 0x0a, 0x24, 0x86, 0x10, 0x6c, 0xe0, 0xc6, 0x68, 0x9a,
	0xe9, 0xee, 0x64, 0xd9, 0xd0, 0xee, 0x2c, 0xbb, 0x5b, 0x03, 0x69, 0xb8, 0xf1, 0x09, 0x4c, 0x7c,
	0x09, 0x5f, 0xc2, 0x78, 0x67, 0x48, 0xbc, 0x21, 0xf1, 0xc6, 0x2b, 0x63, 0xa8, 0x2f, 0xe1, 0x9d,
	0xe9, 0xcc, 0xd4, 0x9d, 0x85, 0x85, 0xce, 0x0a, 0xde, 0xb5, 0x67, 0xce, 0xf9, 0xce, 0xf7, 0xed,
	0x37, 0x7b, 0xce, 0x82, 0x71, 0xea, 0xd1, 0xc0, 0xd9, 0xaf, 0x13, 0x6f, 0x07, 0xef, 0xb6, 0x68,
	0xb0, 0x6f, 0xfa, 0x01, 0x8b, 0x18, 0x9c, 0xb6, 0xb6, 0x89, 0xeb, 0x55, 0xc4, 0xa9, 0x69, 0x55,
	0x28, 0xff, 0x6f, 0xc6, 0xd9, 0xc5, 0x31, 0x87, 0x39, 0x8c, 0x27, 0xe3, 0xee, 0x2f, 0x51, 0x57,
	0x9c, 0x74, 0x18, 0x73, 0x1a, 0x14, 0x13, 0xdf, 0xc5, 0xc4, 0xf3, 0x58, 0x44, 0x22, 0x97, 0x79,
	0xa1, 0x3c, 0xbd, 0x6b, 0xb1, 0xb0, 0xc9, 0x42, 0x5c, 0x27, 0x21, 0x15, 0xed, 0xf0, 0xdb, 0x72,
	0x9d, 0x46, 0xa4, 0x8c, 0x7d, 0xe2, 0xb8, 0x1e, 0x4f, 0x96, 0xb9, 0x57, 0x15, 0x66, 0x3e, 0x09,
	0x48, 0xb3, 0x07, 0x32, 0xa5, 0x1c, 0x88, 0x9f, 0xb5, 0x88, 0xed, 0x50, 0x2f, 0xe5, 0x98, 0xc7,
	0x6b, 0x6a, 0x35, 0x1a, 0x03, 0xf0, 0x65, 0xb7, 0xf1, 0x06, 0x0f, 0x56, 0xe9, 0x6e, 0x8b, 0x86,
	0x11, 0x7a, 0x03, 0xae, 0x24, 0xa2, 0xa1, 0xcf, 0xbc, 0x90, 0xc2, 0x15, 0x30, 0x2c, 0x8a, 0x27,
	0x8c, 0x69, 0x63, 0xa6, 0x30, 0x37, 0x63, 0xf6, 0x7b, 0x2c, 0xa6, 0x40, 0x58, 0x1a, 0x3c, 0xfc,
	0x71, 0x3d, 0x57, 0x95, 0xd5, 0x68, 0x05, 0x20, 0x0e, 0xbf, 0xcc, 0xf3, 0x36, 0xbb, 0xac, 0xb6,
	0x42, 0x1a, 0x2c, 0xda, 0x76, 0x40, 0xc3, 0x1e, 0x09, 0x38, 0x0d, 0x0a, 0xad, 0x38, 0xca, 0x5b,
	0x8e, 0x54, 0xd5, 0x10, 0xba, 0x09, 0x6e, 0x9c, 0x8b, 0x23, 0x68, 0xa3, 0xd7, 0xa0, 0xc8, 0xd3,
	0x9e, 0xb5, 0x82, 0x80, 0x7a, 0xd1, 0x12, 0x69, 0x10, 0xcf, 0xa2, 0xda, 0x6d, 0xe0, 0x24, 0x18,
	0xe1, 0x4f, 0x6e, 0x9d, 0x34, 0xe9, 0x44, 0x9e, 0x9f, 0xc7, 0x01, 0x34, 0x05, 0xae, 0xa5, 0xa2,
	0xcb, 0xe6, 0xf7, 0x65, 0xf3, 0x55, 0x1a, 0x29, 0x34, 0x7b, 0xcd, 0x47, 0x41, 0xde, 0xb5, 0x79,
	0xcf, 0xc1, 0x6a, 0xde, 0xb5, 0x51, 0x24, 0xc1, 0x4e, 0x66, 0x4b, 0x03, 0xb6, 0x40, 0x41, 0x09,
	0x4b, 0x17, 0x66, 0xfb, 0xbb, 0xa0, 0x14, 0x49, 0x2b, 0x54, 0x1c, 0x64, 0x4b, 0x8e, 0x8b, 0x8d,
	0x46, 0x0a, 0xc7, 0x15, 0x00, 0xe2, 0xdb, 0x28, 0x7b, 0xde, 0x32, 0xc5, 0xd5, 0x35, 0xbb, 0x57,
	0xd7, 0x14, 0x6f, 0x8a, 0xbc, 0xba, 0xe6, 0x06, 0x71, 0x7a, 0x0f, 0xb7, 0xaa, 0x54, 0xa2, 0x4f,
	0x86, 0x14, 0x77, 0xb2, 0xcd, 0x59, 0xe2, 0x06, 0x2e, 0x43, 0x1c, 0x5c, 0x4d, 0xd0, 0xcf, 0x73,
	0xfa, 0xb7, 0xfb, 0xd2, 0x17, 0x9c, 0x12, 0xfc, 0xe7, 0x62, 0x27, 0x39, 0x72, 0xe2, 0x95, 0x81,
	0x63, 0x60, 0xc8, 0xf5, 0x6c, 0xba, 0x27, 0x2f, 0x90, 0xf8, 0xa3, 0xfa, 0x99, 0xa8, 0x89, 0x25,
	0x47, 0x71, 0x58, 0xdf, 0x4f, 0x05, 0xab, 0x27, 0x59, 0xc1, 0x51, 0xfd, 0x4c, 0x61, 0xfa, 0x3f,
	0xfc, 0xd4, 0x12, 0x37, 0x70, 0x19, 0xe2, 0x2e, 0xcd, 0xcf, 0xb9, 0xcf, 0x05, 0x30, 0xc4, 0xf9,
	0xc3, 0x8f, 0x06, 0x18, 0x96, 0xe8, 0x95, 0xfe, 0xfc, 0x4e, 0xcf, 0xcb, 0xe2, 0xc3, 0x8c, 0x55,
	0x72, 0x36, 0x94, 0xdf, 0x7d, 0xfb, 0xf5, 0x21, 0x7f, 0x0f, 0xde, 0xc1, 0x6a, 0x39, 0xb6, 0x2a,
	0x74, 0x96, 0x07, 0xf0, 0xa9, 0x99, 0x0f, 0x7f, 0x1b, 0x60, 0x3c, 0x7d, 0xdc, 0xc1, 0xe7, 0x9a,
	0x24, 0xce, 0x9d, 0xba, 0xc5, 0xe5, 0x0b, 0xa2, 0x48, 0x69, 0x55, 0x2e, 0x6d, 0x0d, 0xbe, 0xd0,
	0x90, 0xa6, 0x6e, 0xad, 0x5a, 0x77, 0xf0, 0xd6, 0x88, 0x40, 0xc3, 0x6d, 0x65, 0x0c, 0x1f, 0xc0,
	0x8e, 0x01, 0x46, 0x93, 0x53, 0x16, 0x2e, 0x68, 0xb2, 0x4d, 0x1d, 0xfd, 0xc5, 0x27, 0xff, 0x58,
	0x2d, 0x35, 0x6e, 0x72, 0x8d, 0xeb, 0x70, 0x4d, 0x43, 0xa3, 0x25, 0x20, 0x6a, 0x75, 0x81, 0x91,
	0x54, 0x86, 0xdb, 0x7f, 0xd7, 0xc9, 0x01, 0x3c, 0x34, 0x12, 0x73, 0x50, 0x5b, 0x62, 0xea, 0x82,
	0xd1, 0x96, 0x98, 0xbe, 0x70, 0xd0, 0x02, 0x97, 0xf8, 0x08, 0x56, 0x32, 0xda, 0x88, 0xdb, 0xae,
	0x7d, 0x00, 0xbf, 0x18, 0x60, 0x54, 0x41, 0x5d, 0x6c, 0x34, 0xb4, 0xd5, 0xa4, 0xae, 0x22, 0x6d,
	0x35, 0xe9, 0x1b, 0x06, 0xcd, 0x73, 0x35, 0x65, 0x88, 0x33, 0xaa, 0x81, 0x5f, 0x0d, 0x50, 0x50,
	0xc6, 0x52, 0x16, 0x4f, 0x4e, 0x0f, 0xe0, 0x2c, 0x9e, 0xa4, 0xcc, 0x55, 0xf4, 0x94, 0xab, 0x78,
	0x0c, 0xe7, 0x35, 0x54, 0xa8, 0x5f, 0x7c, 0xb8, 0xcd, 0x77, 0x92, 0xb0, 0x45, 0x01, 0xce, 0x68,
	0xcb, 0x05, 0x04, 0xa5, 0x2f, 0x8a, 0x4c, 0xb6, 0xa8, 0x82, 0x96, 0xd6, 0x0f, 0x8f, 0x4b, 0xc6,
	0xd1, 0x71, 0xc9, 0xf8, 0x79, 0x5c, 0x32, 0xde, 0x77, 0x4a, 0xb9, 0xa3, 0x4e, 0x29, 0xf7, 0xbd,
	0x53, 0xca, 0xbd, 0xaa, 0x38, 0x6e, 0xb4, 0xdd, 0xaa, 0x9b, 0x16, 0x6b, 0x9e, 0x05, 0xba, 0x97,
	0x80, 0xdd, 0xf7, 0x69, 0x58, 0x1f, 0xe6, 0xdf, 0xc4, 0x0f, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff,
	0xd2, 0xa5, 0x06, 0x40, 0x06, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of EnergyTokenUserAddress items.
	EnergyTokenUserAddress(ctx context.Context, in *QueryEnergyTokenUserAddressRequest, opts ...grpc.CallOption) (*QueryEnergyTokenUserAddressResponse, error)
	// Queries a list of CurrentBalance items.
	CurrentBalance(ctx context.Context, in *QueryCurrentBalanceRequest, opts ...grpc.CallOption) (*QueryCurrentBalanceResponse, error)
	// Queries a EnergyToken by id.
	EnergyToken(ctx context.Context, in *QueryGetEnergyTokenRequest, opts ...grpc.CallOption) (*QueryGetEnergyTokenResponse, error)
	// Queries a list of EnergyToken items.
	EnergyTokenAll(ctx context.Context, in *QueryAllEnergyTokenRequest, opts ...grpc.CallOption) (*QueryAllEnergyTokenResponse, error)
	// Queries a TokenParams by index.
	TokenParams(ctx context.Context, in *QueryGetTokenParamsRequest, opts ...grpc.CallOption) (*QueryGetTokenParamsResponse, error)
	// Queries a list of TokenParams items.
	TokenParamsAll(ctx context.Context, in *QueryAllTokenParamsRequest, opts ...grpc.CallOption) (*QueryAllTokenParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.energybank.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EnergyTokenUserAddress(ctx context.Context, in *QueryEnergyTokenUserAddressRequest, opts ...grpc.CallOption) (*QueryEnergyTokenUserAddressResponse, error) {
	out := new(QueryEnergyTokenUserAddressResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.energybank.Query/EnergyTokenUserAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CurrentBalance(ctx context.Context, in *QueryCurrentBalanceRequest, opts ...grpc.CallOption) (*QueryCurrentBalanceResponse, error) {
	out := new(QueryCurrentBalanceResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.energybank.Query/CurrentBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EnergyToken(ctx context.Context, in *QueryGetEnergyTokenRequest, opts ...grpc.CallOption) (*QueryGetEnergyTokenResponse, error) {
	out := new(QueryGetEnergyTokenResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.energybank.Query/EnergyToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EnergyTokenAll(ctx context.Context, in *QueryAllEnergyTokenRequest, opts ...grpc.CallOption) (*QueryAllEnergyTokenResponse, error) {
	out := new(QueryAllEnergyTokenResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.energybank.Query/EnergyTokenAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenParams(ctx context.Context, in *QueryGetTokenParamsRequest, opts ...grpc.CallOption) (*QueryGetTokenParamsResponse, error) {
	out := new(QueryGetTokenParamsResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.energybank.Query/TokenParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenParamsAll(ctx context.Context, in *QueryAllTokenParamsRequest, opts ...grpc.CallOption) (*QueryAllTokenParamsResponse, error) {
	out := new(QueryAllTokenParamsResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.energybank.Query/TokenParamsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of EnergyTokenUserAddress items.
	EnergyTokenUserAddress(context.Context, *QueryEnergyTokenUserAddressRequest) (*QueryEnergyTokenUserAddressResponse, error)
	// Queries a list of CurrentBalance items.
	CurrentBalance(context.Context, *QueryCurrentBalanceRequest) (*QueryCurrentBalanceResponse, error)
	// Queries a EnergyToken by id.
	EnergyToken(context.Context, *QueryGetEnergyTokenRequest) (*QueryGetEnergyTokenResponse, error)
	// Queries a list of EnergyToken items.
	EnergyTokenAll(context.Context, *QueryAllEnergyTokenRequest) (*QueryAllEnergyTokenResponse, error)
	// Queries a TokenParams by index.
	TokenParams(context.Context, *QueryGetTokenParamsRequest) (*QueryGetTokenParamsResponse, error)
	// Queries a list of TokenParams items.
	TokenParamsAll(context.Context, *QueryAllTokenParamsRequest) (*QueryAllTokenParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) EnergyTokenUserAddress(ctx context.Context, req *QueryEnergyTokenUserAddressRequest) (*QueryEnergyTokenUserAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnergyTokenUserAddress not implemented")
}
func (*UnimplementedQueryServer) CurrentBalance(ctx context.Context, req *QueryCurrentBalanceRequest) (*QueryCurrentBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentBalance not implemented")
}
func (*UnimplementedQueryServer) EnergyToken(ctx context.Context, req *QueryGetEnergyTokenRequest) (*QueryGetEnergyTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnergyToken not implemented")
}
func (*UnimplementedQueryServer) EnergyTokenAll(ctx context.Context, req *QueryAllEnergyTokenRequest) (*QueryAllEnergyTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnergyTokenAll not implemented")
}
func (*UnimplementedQueryServer) TokenParams(ctx context.Context, req *QueryGetTokenParamsRequest) (*QueryGetTokenParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenParams not implemented")
}
func (*UnimplementedQueryServer) TokenParamsAll(ctx context.Context, req *QueryAllTokenParamsRequest) (*QueryAllTokenParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenParamsAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.energybank.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EnergyTokenUserAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEnergyTokenUserAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EnergyTokenUserAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.energybank.Query/EnergyTokenUserAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EnergyTokenUserAddress(ctx, req.(*QueryEnergyTokenUserAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CurrentBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurrentBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CurrentBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.energybank.Query/CurrentBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CurrentBalance(ctx, req.(*QueryCurrentBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EnergyToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEnergyTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EnergyToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.energybank.Query/EnergyToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EnergyToken(ctx, req.(*QueryGetEnergyTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EnergyTokenAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllEnergyTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EnergyTokenAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.energybank.Query/EnergyTokenAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EnergyTokenAll(ctx, req.(*QueryAllEnergyTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTokenParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.energybank.Query/TokenParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenParams(ctx, req.(*QueryGetTokenParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenParamsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTokenParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenParamsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.energybank.Query/TokenParamsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenParamsAll(ctx, req.(*QueryAllTokenParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chain4energy.c4echain.energybank.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "EnergyTokenUserAddress",
			Handler:    _Query_EnergyTokenUserAddress_Handler,
		},
		{
			MethodName: "CurrentBalance",
			Handler:    _Query_CurrentBalance_Handler,
		},
		{
			MethodName: "EnergyToken",
			Handler:    _Query_EnergyToken_Handler,
		},
		{
			MethodName: "EnergyTokenAll",
			Handler:    _Query_EnergyTokenAll_Handler,
		},
		{
			MethodName: "TokenParams",
			Handler:    _Query_TokenParams_Handler,
		},
		{
			MethodName: "TokenParamsAll",
			Handler:    _Query_TokenParamsAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "energybank/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEnergyTokenUserAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEnergyTokenUserAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEnergyTokenUserAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEnergyTokenUserAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEnergyTokenUserAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEnergyTokenUserAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCurrentBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCurrentBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCurrentBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenName) > 0 {
		i -= len(m.TokenName)
		copy(dAtA[i:], m.TokenName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCurrentBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCurrentBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCurrentBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetEnergyTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEnergyTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEnergyTokenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEnergyTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEnergyTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEnergyTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EnergyToken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllEnergyTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEnergyTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEnergyTokenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllEnergyTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEnergyTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEnergyTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.EnergyToken) > 0 {
		for iNdEx := len(m.EnergyToken) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EnergyToken[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTokenParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokenParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokenParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTokenParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokenParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokenParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TokenParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllTokenParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTokenParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTokenParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTokenParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTokenParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTokenParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TokenParams) > 0 {
		for iNdEx := len(m.TokenParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEnergyTokenUserAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEnergyTokenUserAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCurrentBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCurrentBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetEnergyTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetEnergyTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EnergyToken.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllEnergyTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllEnergyTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EnergyToken) > 0 {
		for _, e := range m.EnergyToken {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTokenParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTokenParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TokenParams.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllTokenParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTokenParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TokenParams) > 0 {
		for _, e := range m.TokenParams {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEnergyTokenUserAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEnergyTokenUserAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEnergyTokenUserAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEnergyTokenUserAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEnergyTokenUserAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEnergyTokenUserAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCurrentBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCurrentBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCurrentBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCurrentBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCurrentBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCurrentBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEnergyTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEnergyTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEnergyTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEnergyTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEnergyTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEnergyTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnergyToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EnergyToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEnergyTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEnergyTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEnergyTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEnergyTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEnergyTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEnergyTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnergyToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnergyToken = append(m.EnergyToken, EnergyToken{})
			if err := m.EnergyToken[len(m.EnergyToken)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokenParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokenParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokenParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokenParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokenParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokenParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTokenParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTokenParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTokenParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTokenParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTokenParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTokenParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenParams = append(m.TokenParams, TokenParams{})
			if err := m.TokenParams[len(m.TokenParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
