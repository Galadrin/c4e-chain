// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cfeminter/mintparams.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// HalvingMinter represents the inflation parameters.
type HalvingMinter struct {
	// the number of coins produced from the first block
	NewCoinsMint int64 `protobuf:"varint,1,opt,name=new_coins_mint,json=newCoinsMint,proto3" json:"new_coins_mint,omitempty"`
	// expected blocks per year
	BlocksPerYear int64 `protobuf:"varint,6,opt,name=blocks_per_year,json=blocksPerYear,proto3" json:"blocks_per_year,omitempty"`
	// type of coin to mint
	MintDenom string `protobuf:"bytes,3,opt,name=mint_denom,json=mintDenom,proto3" json:"mint_denom,omitempty"`
}

func (m *HalvingMinter) Reset()         { *m = HalvingMinter{} }
func (m *HalvingMinter) String() string { return proto.CompactTextString(m) }
func (*HalvingMinter) ProtoMessage()    {}
func (*HalvingMinter) Descriptor() ([]byte, []int) {
	return fileDescriptor_32effc06260f7444, []int{0}
}
func (m *HalvingMinter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HalvingMinter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HalvingMinter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HalvingMinter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HalvingMinter.Merge(m, src)
}
func (m *HalvingMinter) XXX_Size() int {
	return m.Size()
}
func (m *HalvingMinter) XXX_DiscardUnknown() {
	xxx_messageInfo_HalvingMinter.DiscardUnknown(m)
}

var xxx_messageInfo_HalvingMinter proto.InternalMessageInfo

func (m *HalvingMinter) GetNewCoinsMint() int64 {
	if m != nil {
		return m.NewCoinsMint
	}
	return 0
}

func (m *HalvingMinter) GetBlocksPerYear() int64 {
	if m != nil {
		return m.BlocksPerYear
	}
	return 0
}

func (m *HalvingMinter) GetMintDenom() string {
	if m != nil {
		return m.MintDenom
	}
	return ""
}

func init() {
	proto.RegisterType((*HalvingMinter)(nil), "chain4energy.c4echain.cfeminter.HalvingMinter")
}

func init() { proto.RegisterFile("cfeminter/mintparams.proto", fileDescriptor_32effc06260f7444) }

var fileDescriptor_32effc06260f7444 = []byte{
	// 254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4a, 0x4e, 0x4b, 0xcd,
	0xcd, 0xcc, 0x2b, 0x49, 0x2d, 0xd2, 0x07, 0x51, 0x05, 0x89, 0x45, 0x89, 0xb9, 0xc5, 0x7a, 0x05,
	0x45, 0xf9, 0x25, 0xf9, 0x42, 0xf2, 0xc9, 0x19, 0x89, 0x99, 0x79, 0x26, 0xa9, 0x79, 0xa9, 0x45,
	0xe9, 0x95, 0x7a, 0xc9, 0x26, 0xa9, 0x60, 0xbe, 0x1e, 0x5c, 0x87, 0x94, 0x48, 0x7a, 0x7e, 0x7a,
	0x3e, 0x58, 0xad, 0x3e, 0x88, 0x05, 0xd1, 0xa6, 0x54, 0xc3, 0xc5, 0xeb, 0x91, 0x98, 0x53, 0x96,
	0x99, 0x97, 0xee, 0x0b, 0x56, 0x26, 0xa4, 0xc2, 0xc5, 0x97, 0x97, 0x5a, 0x1e, 0x9f, 0x9c, 0x9f,
	0x99, 0x57, 0x1c, 0x0f, 0xd2, 0x2a, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x1c, 0xc4, 0x93, 0x97, 0x5a,
	0xee, 0x0c, 0x12, 0x04, 0xa9, 0x13, 0x52, 0xe3, 0xe2, 0x4f, 0xca, 0xc9, 0x4f, 0xce, 0x2e, 0x8e,
	0x2f, 0x48, 0x2d, 0x8a, 0xaf, 0x4c, 0x4d, 0x2c, 0x92, 0x60, 0x03, 0x2b, 0xe3, 0x85, 0x08, 0x07,
	0xa4, 0x16, 0x45, 0xa6, 0x26, 0x16, 0x09, 0xc9, 0x72, 0x71, 0x81, 0xcc, 0x88, 0x4f, 0x49, 0xcd,
	0xcb, 0xcf, 0x95, 0x60, 0x56, 0x60, 0xd4, 0xe0, 0x0c, 0xe2, 0x04, 0x89, 0xb8, 0x80, 0x04, 0x9c,
	0x7c, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f,
	0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0xca, 0x38, 0x3d, 0xb3, 0x24,
	0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0x1f, 0xd9, 0x67, 0xfa, 0xc9, 0x26, 0xa9, 0xba, 0x60,
	0x01, 0xfd, 0x0a, 0x7d, 0x44, 0x70, 0x94, 0x54, 0x16, 0xa4, 0x16, 0x27, 0xb1, 0x81, 0xfd, 0x64,
	0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x92, 0xe3, 0x87, 0xd0, 0x28, 0x01, 0x00, 0x00,
}

func (m *HalvingMinter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HalvingMinter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HalvingMinter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlocksPerYear != 0 {
		i = encodeVarintMintparams(dAtA, i, uint64(m.BlocksPerYear))
		i--
		dAtA[i] = 0x30
	}
	if len(m.MintDenom) > 0 {
		i -= len(m.MintDenom)
		copy(dAtA[i:], m.MintDenom)
		i = encodeVarintMintparams(dAtA, i, uint64(len(m.MintDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if m.NewCoinsMint != 0 {
		i = encodeVarintMintparams(dAtA, i, uint64(m.NewCoinsMint))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMintparams(dAtA []byte, offset int, v uint64) int {
	offset -= sovMintparams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HalvingMinter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewCoinsMint != 0 {
		n += 1 + sovMintparams(uint64(m.NewCoinsMint))
	}
	l = len(m.MintDenom)
	if l > 0 {
		n += 1 + l + sovMintparams(uint64(l))
	}
	if m.BlocksPerYear != 0 {
		n += 1 + sovMintparams(uint64(m.BlocksPerYear))
	}
	return n
}

func sovMintparams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMintparams(x uint64) (n int) {
	return sovMintparams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HalvingMinter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMintparams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HalvingMinter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HalvingMinter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewCoinsMint", wireType)
			}
			m.NewCoinsMint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMintparams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewCoinsMint |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMintparams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMintparams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMintparams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlocksPerYear", wireType)
			}
			m.BlocksPerYear = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMintparams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlocksPerYear |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMintparams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMintparams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMintparams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMintparams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMintparams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMintparams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMintparams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMintparams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMintparams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMintparams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMintparams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMintparams = fmt.Errorf("proto: unexpected end of group")
)
