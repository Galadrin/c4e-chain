// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cfeminter/minter.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MintingPeriod_MinterType int32

const (
	MintingPeriod_NO_MINTING                MintingPeriod_MinterType = 0
	MintingPeriod_TIME_LINEAR_MINTER        MintingPeriod_MinterType = 1
	MintingPeriod_PERIODIC_REDUCTION_MINTER MintingPeriod_MinterType = 2
)

var MintingPeriod_MinterType_name = map[int32]string{
	0: "NO_MINTING",
	1: "TIME_LINEAR_MINTER",
	2: "PERIODIC_REDUCTION_MINTER",
}

var MintingPeriod_MinterType_value = map[string]int32{
	"NO_MINTING":                0,
	"TIME_LINEAR_MINTER":        1,
	"PERIODIC_REDUCTION_MINTER": 2,
}

func (x MintingPeriod_MinterType) String() string {
	return proto.EnumName(MintingPeriod_MinterType_name, int32(x))
}

func (MintingPeriod_MinterType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1112145d4942e936, []int{1, 0}
}

type Minter struct {
	Start   time.Time        `protobuf:"bytes,1,opt,name=start,proto3,stdtime" json:"start"`
	Periods []*MintingPeriod `protobuf:"bytes,2,rep,name=periods,proto3" json:"periods,omitempty"`
}

func (m *Minter) Reset()         { *m = Minter{} }
func (m *Minter) String() string { return proto.CompactTextString(m) }
func (*Minter) ProtoMessage()    {}
func (*Minter) Descriptor() ([]byte, []int) {
	return fileDescriptor_1112145d4942e936, []int{0}
}
func (m *Minter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Minter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Minter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Minter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Minter.Merge(m, src)
}
func (m *Minter) XXX_Size() int {
	return m.Size()
}
func (m *Minter) XXX_DiscardUnknown() {
	xxx_messageInfo_Minter.DiscardUnknown(m)
}

var xxx_messageInfo_Minter proto.InternalMessageInfo

func (m *Minter) GetStart() time.Time {
	if m != nil {
		return m.Start
	}
	return time.Time{}
}

func (m *Minter) GetPeriods() []*MintingPeriod {
	if m != nil {
		return m.Periods
	}
	return nil
}

type MintingPeriod struct {
	Position                int32                    `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
	PeriodEnd               *time.Time               `protobuf:"bytes,2,opt,name=period_end,json=periodEnd,proto3,stdtime" json:"period_end,omitempty"`
	Type                    MintingPeriod_MinterType `protobuf:"varint,3,opt,name=type,proto3,enum=chain4energy.c4echain.cfeminter.MintingPeriod_MinterType" json:"type,omitempty"`
	TimeLinearMinter        *TimeLinearMinter        `protobuf:"bytes,4,opt,name=time_linear_minter,json=timeLinearMinter,proto3" json:"time_linear_minter,omitempty"`
	PeriodicReductionMinter *PeriodicReductionMinter `protobuf:"bytes,5,opt,name=periodic_reduction_minter,json=periodicReductionMinter,proto3" json:"periodic_reduction_minter,omitempty"`
}

func (m *MintingPeriod) Reset()         { *m = MintingPeriod{} }
func (m *MintingPeriod) String() string { return proto.CompactTextString(m) }
func (*MintingPeriod) ProtoMessage()    {}
func (*MintingPeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_1112145d4942e936, []int{1}
}
func (m *MintingPeriod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MintingPeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MintingPeriod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MintingPeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintingPeriod.Merge(m, src)
}
func (m *MintingPeriod) XXX_Size() int {
	return m.Size()
}
func (m *MintingPeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_MintingPeriod.DiscardUnknown(m)
}

var xxx_messageInfo_MintingPeriod proto.InternalMessageInfo

func (m *MintingPeriod) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *MintingPeriod) GetPeriodEnd() *time.Time {
	if m != nil {
		return m.PeriodEnd
	}
	return nil
}

func (m *MintingPeriod) GetType() MintingPeriod_MinterType {
	if m != nil {
		return m.Type
	}
	return MintingPeriod_NO_MINTING
}

func (m *MintingPeriod) GetTimeLinearMinter() *TimeLinearMinter {
	if m != nil {
		return m.TimeLinearMinter
	}
	return nil
}

func (m *MintingPeriod) GetPeriodicReductionMinter() *PeriodicReductionMinter {
	if m != nil {
		return m.PeriodicReductionMinter
	}
	return nil
}

type TimeLinearMinter struct {
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *TimeLinearMinter) Reset()         { *m = TimeLinearMinter{} }
func (m *TimeLinearMinter) String() string { return proto.CompactTextString(m) }
func (*TimeLinearMinter) ProtoMessage()    {}
func (*TimeLinearMinter) Descriptor() ([]byte, []int) {
	return fileDescriptor_1112145d4942e936, []int{2}
}
func (m *TimeLinearMinter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeLinearMinter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeLinearMinter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeLinearMinter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeLinearMinter.Merge(m, src)
}
func (m *TimeLinearMinter) XXX_Size() int {
	return m.Size()
}
func (m *TimeLinearMinter) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeLinearMinter.DiscardUnknown(m)
}

var xxx_messageInfo_TimeLinearMinter proto.InternalMessageInfo

type PeriodicReductionMinter struct {
	MintPeriod            time.Duration                          `protobuf:"bytes,1,opt,name=mint_period,json=mintPeriod,proto3,stdduration" json:"mint_period"`
	MintAmount            github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=mint_amount,json=mintAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"mint_amount"`
	ReductionPeriodLength int32                                  `protobuf:"varint,3,opt,name=reduction_period_length,json=reductionPeriodLength,proto3" json:"reduction_period_length,omitempty"`
	ReductionFactor       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=reduction_factor,json=reductionFactor,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"reduction_factor"`
}

func (m *PeriodicReductionMinter) Reset()         { *m = PeriodicReductionMinter{} }
func (m *PeriodicReductionMinter) String() string { return proto.CompactTextString(m) }
func (*PeriodicReductionMinter) ProtoMessage()    {}
func (*PeriodicReductionMinter) Descriptor() ([]byte, []int) {
	return fileDescriptor_1112145d4942e936, []int{3}
}
func (m *PeriodicReductionMinter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeriodicReductionMinter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeriodicReductionMinter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeriodicReductionMinter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeriodicReductionMinter.Merge(m, src)
}
func (m *PeriodicReductionMinter) XXX_Size() int {
	return m.Size()
}
func (m *PeriodicReductionMinter) XXX_DiscardUnknown() {
	xxx_messageInfo_PeriodicReductionMinter.DiscardUnknown(m)
}

var xxx_messageInfo_PeriodicReductionMinter proto.InternalMessageInfo

func (m *PeriodicReductionMinter) GetMintPeriod() time.Duration {
	if m != nil {
		return m.MintPeriod
	}
	return 0
}

func (m *PeriodicReductionMinter) GetReductionPeriodLength() int32 {
	if m != nil {
		return m.ReductionPeriodLength
	}
	return 0
}

type MinterState struct {
	CurrentPosition int32                                  `protobuf:"varint,1,opt,name=current_position,json=currentPosition,proto3" json:"current_position,omitempty"`
	AmountMinted    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount_minted,json=amountMinted,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount_minted"`
}

func (m *MinterState) Reset()         { *m = MinterState{} }
func (m *MinterState) String() string { return proto.CompactTextString(m) }
func (*MinterState) ProtoMessage()    {}
func (*MinterState) Descriptor() ([]byte, []int) {
	return fileDescriptor_1112145d4942e936, []int{4}
}
func (m *MinterState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MinterState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MinterState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MinterState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MinterState.Merge(m, src)
}
func (m *MinterState) XXX_Size() int {
	return m.Size()
}
func (m *MinterState) XXX_DiscardUnknown() {
	xxx_messageInfo_MinterState.DiscardUnknown(m)
}

var xxx_messageInfo_MinterState proto.InternalMessageInfo

func (m *MinterState) GetCurrentPosition() int32 {
	if m != nil {
		return m.CurrentPosition
	}
	return 0
}

func init() {
	proto.RegisterEnum("chain4energy.c4echain.cfeminter.MintingPeriod_MinterType", MintingPeriod_MinterType_name, MintingPeriod_MinterType_value)
	proto.RegisterType((*Minter)(nil), "chain4energy.c4echain.cfeminter.Minter")
	proto.RegisterType((*MintingPeriod)(nil), "chain4energy.c4echain.cfeminter.MintingPeriod")
	proto.RegisterType((*TimeLinearMinter)(nil), "chain4energy.c4echain.cfeminter.TimeLinearMinter")
	proto.RegisterType((*PeriodicReductionMinter)(nil), "chain4energy.c4echain.cfeminter.PeriodicReductionMinter")
	proto.RegisterType((*MinterState)(nil), "chain4energy.c4echain.cfeminter.MinterState")
}

func init() { proto.RegisterFile("cfeminter/minter.proto", fileDescriptor_1112145d4942e936) }

var fileDescriptor_1112145d4942e936 = []byte{
	// 651 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcf, 0x4f, 0x13, 0x41,
	0x18, 0xed, 0x16, 0x8a, 0xf0, 0x55, 0xa0, 0x99, 0x28, 0x94, 0x26, 0x6e, 0x49, 0x0f, 0x06, 0x0f,
	0xcc, 0x46, 0x20, 0x46, 0xbd, 0x18, 0xa0, 0x45, 0x37, 0xa1, 0x3f, 0x32, 0xd4, 0x83, 0x5c, 0x36,
	0xcb, 0xee, 0xb0, 0x6c, 0xa4, 0x3b, 0x9b, 0xdd, 0xd9, 0x44, 0xfe, 0x08, 0x0d, 0x47, 0xff, 0x1f,
	0x2f, 0x1c, 0x39, 0x1a, 0x0f, 0x68, 0xe0, 0xe0, 0xbf, 0x61, 0xe6, 0xc7, 0xb6, 0x80, 0x9a, 0x06,
	0x4e, 0xdb, 0x99, 0x6f, 0xde, 0xfb, 0xde, 0xf7, 0xe6, 0x4d, 0x61, 0xc1, 0x3b, 0xa4, 0x83, 0x30,
	0xe2, 0x34, 0xb1, 0xd4, 0x07, 0xc7, 0x09, 0xe3, 0x0c, 0xd5, 0xbd, 0x23, 0x37, 0x8c, 0x36, 0x68,
	0x44, 0x93, 0xe0, 0x04, 0x7b, 0x1b, 0x54, 0xae, 0xf1, 0xf0, 0x74, 0xed, 0x51, 0xc0, 0x02, 0x26,
	0xcf, 0x5a, 0xe2, 0x97, 0x82, 0xd5, 0xea, 0x01, 0x63, 0xc1, 0x31, 0xb5, 0xe4, 0xea, 0x20, 0x3b,
	0xb4, 0x78, 0x38, 0xa0, 0x29, 0x77, 0x07, 0xb1, 0x3e, 0x60, 0xde, 0x3e, 0xe0, 0x67, 0x89, 0xcb,
	0x43, 0x16, 0xa9, 0x7a, 0xe3, 0x8b, 0x01, 0x53, 0x6d, 0xd9, 0x01, 0xbd, 0x86, 0x52, 0xca, 0xdd,
	0x84, 0x57, 0x8d, 0x65, 0x63, 0xa5, 0xbc, 0x56, 0xc3, 0x0a, 0x8a, 0x73, 0x28, 0xee, 0xe7, 0xdc,
	0x5b, 0xd3, 0x67, 0x17, 0xf5, 0xc2, 0xe9, 0xcf, 0xba, 0x41, 0x14, 0x04, 0xbd, 0x83, 0x07, 0x31,
	0x4d, 0x42, 0xe6, 0xa7, 0xd5, 0xe2, 0xf2, 0xc4, 0x4a, 0x79, 0x0d, 0xe3, 0x31, 0x03, 0x61, 0xd1,
	0x35, 0x8c, 0x82, 0x9e, 0x84, 0x91, 0x1c, 0xde, 0xf8, 0x3d, 0x01, 0xb3, 0x37, 0x4a, 0xa8, 0x06,
	0xd3, 0x31, 0x4b, 0x43, 0x21, 0x5a, 0x4a, 0x2b, 0x91, 0xe1, 0x1a, 0xbd, 0x01, 0x50, 0x40, 0x87,
	0x46, 0x7e, 0xb5, 0x38, 0x56, 0xf8, 0xa4, 0x14, 0x3d, 0xa3, 0x30, 0xad, 0xc8, 0x47, 0x6d, 0x98,
	0xe4, 0x27, 0x31, 0xad, 0x4e, 0x2c, 0x1b, 0x2b, 0x73, 0x6b, 0xaf, 0xee, 0xa6, 0x1a, 0x2b, 0xe7,
	0xfa, 0x27, 0x31, 0x25, 0x92, 0x06, 0x39, 0x80, 0xc4, 0x0d, 0x38, 0xc7, 0x61, 0x44, 0xdd, 0xc4,
	0x51, 0xa0, 0xea, 0xa4, 0xd4, 0xf5, 0x7c, 0x2c, 0xb9, 0xd0, 0xb9, 0x2b, 0x91, 0x8a, 0x98, 0x54,
	0xf8, 0xad, 0x1d, 0xc4, 0x61, 0x49, 0x89, 0x0f, 0x3d, 0x27, 0xa1, 0x7e, 0xe6, 0x09, 0x1b, 0xf2,
	0x3e, 0x25, 0xd9, 0xe7, 0xe5, 0xd8, 0x3e, 0x3d, 0xcd, 0x40, 0x72, 0x02, 0xdd, 0x6e, 0x31, 0xfe,
	0x77, 0xa1, 0xb1, 0x07, 0x30, 0x1a, 0x15, 0xcd, 0x01, 0x74, 0xba, 0x4e, 0xdb, 0xee, 0xf4, 0xed,
	0xce, 0xdb, 0x4a, 0x01, 0x2d, 0x00, 0xea, 0xdb, 0xed, 0x96, 0xb3, 0x6b, 0x77, 0x5a, 0x9b, 0x44,
	0x16, 0x5a, 0xa4, 0x62, 0xa0, 0x27, 0xb0, 0xd4, 0x6b, 0x11, 0xbb, 0xdb, 0xb4, 0xb7, 0x1d, 0xd2,
	0x6a, 0xbe, 0xdf, 0xee, 0xdb, 0xdd, 0x4e, 0x5e, 0x2e, 0x36, 0xf6, 0xa1, 0x72, 0x7b, 0x60, 0xb4,
	0x03, 0x53, 0xee, 0x80, 0x65, 0x91, 0x0a, 0xe1, 0xcc, 0x16, 0x16, 0x41, 0xfb, 0x71, 0x51, 0x7f,
	0x1a, 0x84, 0xfc, 0x28, 0x3b, 0xc0, 0x1e, 0x1b, 0x58, 0x1e, 0x4b, 0x07, 0x2c, 0xd5, 0x9f, 0xd5,
	0xd4, 0xff, 0x68, 0x09, 0xeb, 0x53, 0x6c, 0x47, 0x9c, 0x68, 0x74, 0xe3, 0x5b, 0x11, 0x16, 0xff,
	0x33, 0x25, 0x6a, 0x42, 0x59, 0xf8, 0xe0, 0xa8, 0x61, 0x75, 0xda, 0x97, 0xfe, 0x0a, 0x4d, 0x53,
	0x3f, 0x14, 0x15, 0xf6, 0xaf, 0x22, 0x37, 0x20, 0x70, 0x3a, 0x95, 0x5d, 0xcd, 0xa2, 0xe5, 0x16,
	0xef, 0x25, 0x57, 0x12, 0x6e, 0x4a, 0x06, 0xf4, 0x02, 0x16, 0x47, 0x17, 0xaa, 0x43, 0x7d, 0x4c,
	0xa3, 0x80, 0x1f, 0xc9, 0x70, 0x96, 0xc8, 0xe3, 0x61, 0x59, 0x49, 0xd8, 0x95, 0x45, 0xf4, 0x01,
	0x2a, 0x23, 0xdc, 0xa1, 0xeb, 0x71, 0xa6, 0x02, 0x77, 0x37, 0x35, 0x4d, 0xea, 0x91, 0xf9, 0x21,
	0xcf, 0x8e, 0xa4, 0x69, 0x7c, 0x36, 0xa0, 0xac, 0x4c, 0xdb, 0xe3, 0x2e, 0xa7, 0xe8, 0x19, 0x54,
	0xbc, 0x2c, 0x49, 0xa8, 0x30, 0xef, 0xe6, 0x8b, 0x9c, 0xd7, 0xfb, 0xbd, 0xfc, 0x61, 0xee, 0xc1,
	0xac, 0x72, 0x46, 0x65, 0xd3, 0xbf, 0xa7, 0x41, 0x0f, 0x15, 0x89, 0x14, 0xe1, 0x6f, 0xb5, 0xcf,
	0x2e, 0x4d, 0xe3, 0xfc, 0xd2, 0x34, 0x7e, 0x5d, 0x9a, 0xc6, 0xe9, 0x95, 0x59, 0x38, 0xbf, 0x32,
	0x0b, 0xdf, 0xaf, 0xcc, 0xc2, 0xfe, 0xfa, 0x75, 0xbe, 0x6b, 0xe9, 0xb7, 0xbc, 0x0d, 0xba, 0x2a,
	0x37, 0xac, 0x4f, 0xd6, 0xe8, 0xaf, 0x57, 0x36, 0x38, 0x98, 0x92, 0x77, 0xbd, 0xfe, 0x27, 0x00,
	0x00, 0xff, 0xff, 0xf3, 0xbf, 0xf7, 0x2c, 0x94, 0x05, 0x00, 0x00,
}

func (m *Minter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Minter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Minter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Periods) > 0 {
		for iNdEx := len(m.Periods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Periods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMinter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Start, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Start):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintMinter(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MintingPeriod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MintingPeriod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MintingPeriod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PeriodicReductionMinter != nil {
		{
			size, err := m.PeriodicReductionMinter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMinter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.TimeLinearMinter != nil {
		{
			size, err := m.TimeLinearMinter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMinter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintMinter(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.PeriodEnd != nil {
		n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.PeriodEnd, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.PeriodEnd):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintMinter(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x12
	}
	if m.Position != 0 {
		i = encodeVarintMinter(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TimeLinearMinter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeLinearMinter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeLinearMinter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMinter(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PeriodicReductionMinter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeriodicReductionMinter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeriodicReductionMinter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ReductionFactor.Size()
		i -= size
		if _, err := m.ReductionFactor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMinter(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.ReductionPeriodLength != 0 {
		i = encodeVarintMinter(dAtA, i, uint64(m.ReductionPeriodLength))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.MintAmount.Size()
		i -= size
		if _, err := m.MintAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMinter(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	n5, err5 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.MintPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.MintPeriod):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintMinter(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MinterState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MinterState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MinterState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.AmountMinted.Size()
		i -= size
		if _, err := m.AmountMinted.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMinter(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.CurrentPosition != 0 {
		i = encodeVarintMinter(dAtA, i, uint64(m.CurrentPosition))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMinter(dAtA []byte, offset int, v uint64) int {
	offset -= sovMinter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Minter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Start)
	n += 1 + l + sovMinter(uint64(l))
	if len(m.Periods) > 0 {
		for _, e := range m.Periods {
			l = e.Size()
			n += 1 + l + sovMinter(uint64(l))
		}
	}
	return n
}

func (m *MintingPeriod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Position != 0 {
		n += 1 + sovMinter(uint64(m.Position))
	}
	if m.PeriodEnd != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.PeriodEnd)
		n += 1 + l + sovMinter(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovMinter(uint64(m.Type))
	}
	if m.TimeLinearMinter != nil {
		l = m.TimeLinearMinter.Size()
		n += 1 + l + sovMinter(uint64(l))
	}
	if m.PeriodicReductionMinter != nil {
		l = m.PeriodicReductionMinter.Size()
		n += 1 + l + sovMinter(uint64(l))
	}
	return n
}

func (m *TimeLinearMinter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovMinter(uint64(l))
	return n
}

func (m *PeriodicReductionMinter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.MintPeriod)
	n += 1 + l + sovMinter(uint64(l))
	l = m.MintAmount.Size()
	n += 1 + l + sovMinter(uint64(l))
	if m.ReductionPeriodLength != 0 {
		n += 1 + sovMinter(uint64(m.ReductionPeriodLength))
	}
	l = m.ReductionFactor.Size()
	n += 1 + l + sovMinter(uint64(l))
	return n
}

func (m *MinterState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentPosition != 0 {
		n += 1 + sovMinter(uint64(m.CurrentPosition))
	}
	l = m.AmountMinted.Size()
	n += 1 + l + sovMinter(uint64(l))
	return n
}

func sovMinter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMinter(x uint64) (n int) {
	return sovMinter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Minter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMinter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Minter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Minter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMinter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMinter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Start, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Periods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMinter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMinter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Periods = append(m.Periods, &MintingPeriod{})
			if err := m.Periods[len(m.Periods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMinter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMinter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MintingPeriod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMinter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MintingPeriod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MintingPeriod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodEnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMinter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMinter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeriodEnd == nil {
				m.PeriodEnd = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.PeriodEnd, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= MintingPeriod_MinterType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeLinearMinter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMinter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMinter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeLinearMinter == nil {
				m.TimeLinearMinter = &TimeLinearMinter{}
			}
			if err := m.TimeLinearMinter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodicReductionMinter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMinter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMinter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeriodicReductionMinter == nil {
				m.PeriodicReductionMinter = &PeriodicReductionMinter{}
			}
			if err := m.PeriodicReductionMinter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMinter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMinter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeLinearMinter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMinter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeLinearMinter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeLinearMinter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMinter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMinter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMinter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMinter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeriodicReductionMinter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMinter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeriodicReductionMinter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeriodicReductionMinter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMinter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMinter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.MintPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMinter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMinter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReductionPeriodLength", wireType)
			}
			m.ReductionPeriodLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReductionPeriodLength |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReductionFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMinter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMinter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReductionFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMinter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMinter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MinterState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMinter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MinterState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MinterState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPosition", wireType)
			}
			m.CurrentPosition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentPosition |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountMinted", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMinter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMinter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountMinted.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMinter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMinter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMinter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMinter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMinter
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMinter
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMinter
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMinter        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMinter          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMinter = fmt.Errorf("proto: unexpected end of group")
)
