// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cfeminter/minter.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MintingPeriod_MinterType int32

const (
	MintingPeriod_NO_MINTING         MintingPeriod_MinterType = 0
	MintingPeriod_TIME_LINEAR_MINTER MintingPeriod_MinterType = 1
)

var MintingPeriod_MinterType_name = map[int32]string{
	0: "NO_MINTING",
	1: "TIME_LINEAR_MINTER",
}

var MintingPeriod_MinterType_value = map[string]int32{
	"NO_MINTING":         0,
	"TIME_LINEAR_MINTER": 1,
}

func (x MintingPeriod_MinterType) String() string {
	return proto.EnumName(MintingPeriod_MinterType_name, int32(x))
}

func (MintingPeriod_MinterType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1112145d4942e936, []int{2, 0}
}

// HalvingMinter represents the inflation parameters.
type HalvingMinter struct {
	// the number of coins produced from the first block
	NewCoinsMint int64 `protobuf:"varint,1,opt,name=new_coins_mint,json=newCoinsMint,proto3" json:"new_coins_mint,omitempty"`
	// expected blocks per year
	BlocksPerYear int64 `protobuf:"varint,6,opt,name=blocks_per_year,json=blocksPerYear,proto3" json:"blocks_per_year,omitempty"`
	// type of coin to mint
	MintDenom string `protobuf:"bytes,3,opt,name=mint_denom,json=mintDenom,proto3" json:"mint_denom,omitempty"`
}

func (m *HalvingMinter) Reset()         { *m = HalvingMinter{} }
func (m *HalvingMinter) String() string { return proto.CompactTextString(m) }
func (*HalvingMinter) ProtoMessage()    {}
func (*HalvingMinter) Descriptor() ([]byte, []int) {
	return fileDescriptor_1112145d4942e936, []int{0}
}
func (m *HalvingMinter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HalvingMinter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HalvingMinter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HalvingMinter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HalvingMinter.Merge(m, src)
}
func (m *HalvingMinter) XXX_Size() int {
	return m.Size()
}
func (m *HalvingMinter) XXX_DiscardUnknown() {
	xxx_messageInfo_HalvingMinter.DiscardUnknown(m)
}

var xxx_messageInfo_HalvingMinter proto.InternalMessageInfo

func (m *HalvingMinter) GetNewCoinsMint() int64 {
	if m != nil {
		return m.NewCoinsMint
	}
	return 0
}

func (m *HalvingMinter) GetBlocksPerYear() int64 {
	if m != nil {
		return m.BlocksPerYear
	}
	return 0
}

func (m *HalvingMinter) GetMintDenom() string {
	if m != nil {
		return m.MintDenom
	}
	return ""
}

type Minter struct {
	Start   time.Time        `protobuf:"bytes,1,opt,name=start,proto3,stdtime" json:"start"`
	Periods []*MintingPeriod `protobuf:"bytes,2,rep,name=periods,proto3" json:"periods,omitempty"`
}

func (m *Minter) Reset()         { *m = Minter{} }
func (m *Minter) String() string { return proto.CompactTextString(m) }
func (*Minter) ProtoMessage()    {}
func (*Minter) Descriptor() ([]byte, []int) {
	return fileDescriptor_1112145d4942e936, []int{1}
}
func (m *Minter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Minter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Minter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Minter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Minter.Merge(m, src)
}
func (m *Minter) XXX_Size() int {
	return m.Size()
}
func (m *Minter) XXX_DiscardUnknown() {
	xxx_messageInfo_Minter.DiscardUnknown(m)
}

var xxx_messageInfo_Minter proto.InternalMessageInfo

func (m *Minter) GetStart() time.Time {
	if m != nil {
		return m.Start
	}
	return time.Time{}
}

func (m *Minter) GetPeriods() []*MintingPeriod {
	if m != nil {
		return m.Periods
	}
	return nil
}

type MintingPeriod struct {
	OrderingId       int32                    `protobuf:"varint,1,opt,name=ordering_id,json=orderingId,proto3" json:"ordering_id,omitempty"`
	PeriodEnd        *time.Time               `protobuf:"bytes,2,opt,name=period_end,json=periodEnd,proto3,stdtime" json:"period_end,omitempty"`
	Type             MintingPeriod_MinterType `protobuf:"varint,3,opt,name=type,proto3,enum=chain4energy.c4echain.cfeminter.MintingPeriod_MinterType" json:"type,omitempty"`
	TimeLinearMinter *TimeLinearMinter        `protobuf:"bytes,4,opt,name=time_linear_minter,json=timeLinearMinter,proto3" json:"time_linear_minter,omitempty"`
}

func (m *MintingPeriod) Reset()         { *m = MintingPeriod{} }
func (m *MintingPeriod) String() string { return proto.CompactTextString(m) }
func (*MintingPeriod) ProtoMessage()    {}
func (*MintingPeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_1112145d4942e936, []int{2}
}
func (m *MintingPeriod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MintingPeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MintingPeriod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MintingPeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintingPeriod.Merge(m, src)
}
func (m *MintingPeriod) XXX_Size() int {
	return m.Size()
}
func (m *MintingPeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_MintingPeriod.DiscardUnknown(m)
}

var xxx_messageInfo_MintingPeriod proto.InternalMessageInfo

func (m *MintingPeriod) GetOrderingId() int32 {
	if m != nil {
		return m.OrderingId
	}
	return 0
}

func (m *MintingPeriod) GetPeriodEnd() *time.Time {
	if m != nil {
		return m.PeriodEnd
	}
	return nil
}

func (m *MintingPeriod) GetType() MintingPeriod_MinterType {
	if m != nil {
		return m.Type
	}
	return MintingPeriod_NO_MINTING
}

func (m *MintingPeriod) GetTimeLinearMinter() *TimeLinearMinter {
	if m != nil {
		return m.TimeLinearMinter
	}
	return nil
}

type TimeLinearMinter struct {
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *TimeLinearMinter) Reset()         { *m = TimeLinearMinter{} }
func (m *TimeLinearMinter) String() string { return proto.CompactTextString(m) }
func (*TimeLinearMinter) ProtoMessage()    {}
func (*TimeLinearMinter) Descriptor() ([]byte, []int) {
	return fileDescriptor_1112145d4942e936, []int{3}
}
func (m *TimeLinearMinter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeLinearMinter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeLinearMinter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeLinearMinter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeLinearMinter.Merge(m, src)
}
func (m *TimeLinearMinter) XXX_Size() int {
	return m.Size()
}
func (m *TimeLinearMinter) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeLinearMinter.DiscardUnknown(m)
}

var xxx_messageInfo_TimeLinearMinter proto.InternalMessageInfo

type MinterState struct {
	CurrentOrderingId int32                                  `protobuf:"varint,1,opt,name=current_ordering_id,json=currentOrderingId,proto3" json:"current_ordering_id,omitempty"`
	AmountMinted      github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount_minted,json=amountMinted,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount_minted"`
}

func (m *MinterState) Reset()         { *m = MinterState{} }
func (m *MinterState) String() string { return proto.CompactTextString(m) }
func (*MinterState) ProtoMessage()    {}
func (*MinterState) Descriptor() ([]byte, []int) {
	return fileDescriptor_1112145d4942e936, []int{4}
}
func (m *MinterState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MinterState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MinterState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MinterState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MinterState.Merge(m, src)
}
func (m *MinterState) XXX_Size() int {
	return m.Size()
}
func (m *MinterState) XXX_DiscardUnknown() {
	xxx_messageInfo_MinterState.DiscardUnknown(m)
}

var xxx_messageInfo_MinterState proto.InternalMessageInfo

func (m *MinterState) GetCurrentOrderingId() int32 {
	if m != nil {
		return m.CurrentOrderingId
	}
	return 0
}

func init() {
	proto.RegisterEnum("chain4energy.c4echain.cfeminter.MintingPeriod_MinterType", MintingPeriod_MinterType_name, MintingPeriod_MinterType_value)
	proto.RegisterType((*HalvingMinter)(nil), "chain4energy.c4echain.cfeminter.HalvingMinter")
	proto.RegisterType((*Minter)(nil), "chain4energy.c4echain.cfeminter.Minter")
	proto.RegisterType((*MintingPeriod)(nil), "chain4energy.c4echain.cfeminter.MintingPeriod")
	proto.RegisterType((*TimeLinearMinter)(nil), "chain4energy.c4echain.cfeminter.TimeLinearMinter")
	proto.RegisterType((*MinterState)(nil), "chain4energy.c4echain.cfeminter.MinterState")
}

func init() { proto.RegisterFile("cfeminter/minter.proto", fileDescriptor_1112145d4942e936) }

var fileDescriptor_1112145d4942e936 = []byte{
	// 573 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcf, 0x4f, 0x13, 0x41,
	0x14, 0xee, 0xf2, 0xa3, 0xda, 0x57, 0x8a, 0x75, 0x34, 0x64, 0x43, 0xe2, 0x2e, 0xd9, 0x18, 0xc2,
	0x85, 0xd9, 0x08, 0xbd, 0xe8, 0xc5, 0x88, 0x56, 0xd9, 0x84, 0x16, 0xb2, 0xf4, 0x22, 0x97, 0xc9,
	0x76, 0x77, 0x58, 0x36, 0x74, 0x67, 0x36, 0xb3, 0x53, 0xb1, 0x89, 0x7f, 0x83, 0x21, 0xfe, 0x55,
	0x1c, 0xb9, 0x69, 0x3c, 0xa0, 0x81, 0x7f, 0xc4, 0xcc, 0x4c, 0x6b, 0x11, 0x0f, 0x0d, 0xa7, 0xe9,
	0x7c, 0xef, 0x7d, 0xdf, 0xfb, 0xfa, 0xbe, 0xc9, 0xc2, 0x4a, 0x7c, 0x4c, 0xf3, 0x8c, 0x49, 0x2a,
	0x7c, 0x73, 0xe0, 0x42, 0x70, 0xc9, 0x91, 0x1b, 0x9f, 0x44, 0x19, 0x6b, 0x51, 0x46, 0x45, 0x3a,
	0xc2, 0x71, 0x8b, 0xea, 0x3b, 0xfe, 0xdb, 0xbd, 0xfa, 0x34, 0xe5, 0x29, 0xd7, 0xbd, 0xbe, 0xfa,
	0x65, 0x68, 0xab, 0x6e, 0xca, 0x79, 0x3a, 0xa0, 0xbe, 0xbe, 0xf5, 0x87, 0xc7, 0xbe, 0xcc, 0x72,
	0x5a, 0xca, 0x28, 0x2f, 0x4c, 0x83, 0xf7, 0x05, 0x1a, 0xbb, 0xd1, 0xe0, 0x53, 0xc6, 0xd2, 0x8e,
	0xd6, 0x41, 0xcf, 0x61, 0x99, 0xd1, 0x33, 0x12, 0xf3, 0x8c, 0x95, 0x44, 0x69, 0xdb, 0xd6, 0x9a,
	0xb5, 0x31, 0x1f, 0x2e, 0x31, 0x7a, 0xf6, 0x56, 0x81, 0xaa, 0x0f, 0xad, 0xc3, 0xa3, 0xfe, 0x80,
	0xc7, 0xa7, 0x25, 0x29, 0xa8, 0x20, 0x23, 0x1a, 0x09, 0xbb, 0xaa, 0xdb, 0x1a, 0x06, 0x3e, 0xa0,
	0xe2, 0x23, 0x8d, 0x04, 0x7a, 0x06, 0xa0, 0x34, 0x48, 0x42, 0x19, 0xcf, 0xed, 0xf9, 0x35, 0x6b,
	0xa3, 0x16, 0xd6, 0x14, 0xf2, 0x4e, 0x01, 0xde, 0x57, 0x0b, 0xaa, 0xe3, 0xb9, 0xaf, 0x60, 0xb1,
	0x94, 0x91, 0x30, 0xe3, 0xea, 0x5b, 0xab, 0xd8, 0x38, 0xc7, 0x13, 0xe7, 0xb8, 0x37, 0x71, 0xbe,
	0xf3, 0xf0, 0xe2, 0xca, 0xad, 0x9c, 0xff, 0x72, 0xad, 0xd0, 0x50, 0xd0, 0x2e, 0x3c, 0x28, 0xa8,
	0xc8, 0x78, 0x52, 0xda, 0x73, 0x6b, 0xf3, 0x1b, 0xf5, 0x2d, 0x8c, 0x67, 0xac, 0x0b, 0xab, 0xa9,
	0x19, 0x4b, 0x0f, 0x34, 0x2d, 0x9c, 0xd0, 0xbd, 0xef, 0x73, 0xd0, 0xf8, 0xa7, 0x84, 0x5c, 0xa8,
	0x73, 0x91, 0x50, 0x91, 0xb1, 0x94, 0x64, 0x89, 0x76, 0xb7, 0x18, 0xc2, 0x04, 0x0a, 0x12, 0xf4,
	0x1a, 0xc0, 0xb0, 0x09, 0x65, 0x89, 0x3d, 0x37, 0xd3, 0xfd, 0x82, 0x76, 0x5e, 0x33, 0x9c, 0x36,
	0x4b, 0x50, 0x07, 0x16, 0xe4, 0xa8, 0xa0, 0x7a, 0x3b, 0xcb, 0x5b, 0x2f, 0xef, 0x67, 0x1d, 0x9b,
	0xf5, 0xf5, 0x46, 0x05, 0x0d, 0xb5, 0x0c, 0x22, 0x80, 0x54, 0xc8, 0x64, 0x90, 0x31, 0x1a, 0x09,
	0x62, 0x48, 0xf6, 0x82, 0xf6, 0xf5, 0x62, 0xa6, 0xb8, 0xf2, 0xb9, 0xa7, 0x99, 0x46, 0x38, 0x6c,
	0xca, 0x3b, 0x88, 0xd7, 0x02, 0x98, 0x0e, 0x45, 0xcb, 0x00, 0xdd, 0x7d, 0xd2, 0x09, 0xba, 0xbd,
	0xa0, 0xfb, 0xa1, 0x59, 0x41, 0x2b, 0x80, 0x7a, 0x41, 0xa7, 0x4d, 0xf6, 0x82, 0x6e, 0xfb, 0x4d,
	0xa8, 0x0b, 0xed, 0xb0, 0x69, 0x79, 0x47, 0xd0, 0xbc, 0xab, 0x8d, 0xde, 0x43, 0x35, 0xca, 0xf9,
	0x70, 0xfc, 0xc6, 0x6a, 0x3b, 0x58, 0x05, 0xfb, 0xf3, 0xca, 0x5d, 0x4f, 0x33, 0x79, 0x32, 0xec,
	0xe3, 0x98, 0xe7, 0x7e, 0xcc, 0xcb, 0x9c, 0x97, 0xe3, 0x63, 0xb3, 0x4c, 0x4e, 0x7d, 0xf5, 0x2f,
	0x4b, 0x1c, 0x30, 0x19, 0x8e, 0xd9, 0xde, 0x37, 0x0b, 0xea, 0x46, 0xf2, 0x50, 0x46, 0x92, 0x22,
	0x0c, 0x4f, 0xe2, 0xa1, 0x10, 0x94, 0x49, 0xf2, 0x7f, 0x76, 0x8f, 0xc7, 0xa5, 0xfd, 0x69, 0x84,
	0x87, 0xd0, 0x30, 0x4a, 0x66, 0x5b, 0x26, 0xc5, 0xfb, 0xdb, 0x59, 0x32, 0x22, 0xda, 0x49, 0xb2,
	0xd3, 0xb9, 0xb8, 0x76, 0xac, 0xcb, 0x6b, 0xc7, 0xfa, 0x7d, 0xed, 0x58, 0xe7, 0x37, 0x4e, 0xe5,
	0xf2, 0xc6, 0xa9, 0xfc, 0xb8, 0x71, 0x2a, 0x47, 0xdb, 0xb7, 0xf5, 0x6e, 0xe5, 0xe1, 0xc7, 0x2d,
	0xba, 0xa9, 0x01, 0xff, 0xb3, 0x3f, 0xfd, 0x0e, 0xe8, 0x01, 0xfd, 0xaa, 0x7e, 0x4a, 0xdb, 0x7f,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x9b, 0x84, 0x5d, 0x21, 0x04, 0x00, 0x00,
}

func (m *HalvingMinter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HalvingMinter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HalvingMinter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlocksPerYear != 0 {
		i = encodeVarintMinter(dAtA, i, uint64(m.BlocksPerYear))
		i--
		dAtA[i] = 0x30
	}
	if len(m.MintDenom) > 0 {
		i -= len(m.MintDenom)
		copy(dAtA[i:], m.MintDenom)
		i = encodeVarintMinter(dAtA, i, uint64(len(m.MintDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if m.NewCoinsMint != 0 {
		i = encodeVarintMinter(dAtA, i, uint64(m.NewCoinsMint))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Minter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Minter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Minter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Periods) > 0 {
		for iNdEx := len(m.Periods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Periods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMinter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Start, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Start):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintMinter(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MintingPeriod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MintingPeriod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MintingPeriod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeLinearMinter != nil {
		{
			size, err := m.TimeLinearMinter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMinter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintMinter(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.PeriodEnd != nil {
		n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.PeriodEnd, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.PeriodEnd):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintMinter(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x12
	}
	if m.OrderingId != 0 {
		i = encodeVarintMinter(dAtA, i, uint64(m.OrderingId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TimeLinearMinter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeLinearMinter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeLinearMinter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMinter(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MinterState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MinterState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MinterState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.AmountMinted.Size()
		i -= size
		if _, err := m.AmountMinted.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMinter(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.CurrentOrderingId != 0 {
		i = encodeVarintMinter(dAtA, i, uint64(m.CurrentOrderingId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMinter(dAtA []byte, offset int, v uint64) int {
	offset -= sovMinter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HalvingMinter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewCoinsMint != 0 {
		n += 1 + sovMinter(uint64(m.NewCoinsMint))
	}
	l = len(m.MintDenom)
	if l > 0 {
		n += 1 + l + sovMinter(uint64(l))
	}
	if m.BlocksPerYear != 0 {
		n += 1 + sovMinter(uint64(m.BlocksPerYear))
	}
	return n
}

func (m *Minter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Start)
	n += 1 + l + sovMinter(uint64(l))
	if len(m.Periods) > 0 {
		for _, e := range m.Periods {
			l = e.Size()
			n += 1 + l + sovMinter(uint64(l))
		}
	}
	return n
}

func (m *MintingPeriod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderingId != 0 {
		n += 1 + sovMinter(uint64(m.OrderingId))
	}
	if m.PeriodEnd != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.PeriodEnd)
		n += 1 + l + sovMinter(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovMinter(uint64(m.Type))
	}
	if m.TimeLinearMinter != nil {
		l = m.TimeLinearMinter.Size()
		n += 1 + l + sovMinter(uint64(l))
	}
	return n
}

func (m *TimeLinearMinter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovMinter(uint64(l))
	return n
}

func (m *MinterState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentOrderingId != 0 {
		n += 1 + sovMinter(uint64(m.CurrentOrderingId))
	}
	l = m.AmountMinted.Size()
	n += 1 + l + sovMinter(uint64(l))
	return n
}

func sovMinter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMinter(x uint64) (n int) {
	return sovMinter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HalvingMinter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMinter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HalvingMinter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HalvingMinter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewCoinsMint", wireType)
			}
			m.NewCoinsMint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewCoinsMint |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMinter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMinter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlocksPerYear", wireType)
			}
			m.BlocksPerYear = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlocksPerYear |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMinter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMinter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Minter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMinter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Minter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Minter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMinter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMinter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Start, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Periods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMinter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMinter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Periods = append(m.Periods, &MintingPeriod{})
			if err := m.Periods[len(m.Periods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMinter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMinter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MintingPeriod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMinter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MintingPeriod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MintingPeriod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderingId", wireType)
			}
			m.OrderingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderingId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodEnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMinter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMinter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeriodEnd == nil {
				m.PeriodEnd = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.PeriodEnd, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= MintingPeriod_MinterType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeLinearMinter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMinter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMinter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeLinearMinter == nil {
				m.TimeLinearMinter = &TimeLinearMinter{}
			}
			if err := m.TimeLinearMinter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMinter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMinter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeLinearMinter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMinter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeLinearMinter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeLinearMinter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMinter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMinter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMinter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMinter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MinterState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMinter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MinterState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MinterState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentOrderingId", wireType)
			}
			m.CurrentOrderingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentOrderingId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountMinted", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMinter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMinter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountMinted.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMinter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMinter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMinter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMinter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMinter
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMinter
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMinter
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMinter        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMinter          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMinter = fmt.Errorf("proto: unexpected end of group")
)
