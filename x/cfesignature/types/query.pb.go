// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cfesignature/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29bfc094683f5c79, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29bfc094683f5c79, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryCreateReferenceIdRequest struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *QueryCreateReferenceIdRequest) Reset()         { *m = QueryCreateReferenceIdRequest{} }
func (m *QueryCreateReferenceIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCreateReferenceIdRequest) ProtoMessage()    {}
func (*QueryCreateReferenceIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29bfc094683f5c79, []int{2}
}
func (m *QueryCreateReferenceIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCreateReferenceIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCreateReferenceIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCreateReferenceIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCreateReferenceIdRequest.Merge(m, src)
}
func (m *QueryCreateReferenceIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCreateReferenceIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCreateReferenceIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCreateReferenceIdRequest proto.InternalMessageInfo

func (m *QueryCreateReferenceIdRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type QueryCreateReferenceIdResponse struct {
	ReferenceId string `protobuf:"bytes,1,opt,name=referenceId,proto3" json:"referenceId,omitempty"`
}

func (m *QueryCreateReferenceIdResponse) Reset()         { *m = QueryCreateReferenceIdResponse{} }
func (m *QueryCreateReferenceIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCreateReferenceIdResponse) ProtoMessage()    {}
func (*QueryCreateReferenceIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29bfc094683f5c79, []int{3}
}
func (m *QueryCreateReferenceIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCreateReferenceIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCreateReferenceIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCreateReferenceIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCreateReferenceIdResponse.Merge(m, src)
}
func (m *QueryCreateReferenceIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCreateReferenceIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCreateReferenceIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCreateReferenceIdResponse proto.InternalMessageInfo

func (m *QueryCreateReferenceIdResponse) GetReferenceId() string {
	if m != nil {
		return m.ReferenceId
	}
	return ""
}

type QueryCreateStorageKeyRequest struct {
	TargetAccAddress string `protobuf:"bytes,1,opt,name=targetAccAddress,proto3" json:"targetAccAddress,omitempty"`
	ReferenceId      string `protobuf:"bytes,2,opt,name=referenceId,proto3" json:"referenceId,omitempty"`
}

func (m *QueryCreateStorageKeyRequest) Reset()         { *m = QueryCreateStorageKeyRequest{} }
func (m *QueryCreateStorageKeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCreateStorageKeyRequest) ProtoMessage()    {}
func (*QueryCreateStorageKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29bfc094683f5c79, []int{4}
}
func (m *QueryCreateStorageKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCreateStorageKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCreateStorageKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCreateStorageKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCreateStorageKeyRequest.Merge(m, src)
}
func (m *QueryCreateStorageKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCreateStorageKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCreateStorageKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCreateStorageKeyRequest proto.InternalMessageInfo

func (m *QueryCreateStorageKeyRequest) GetTargetAccAddress() string {
	if m != nil {
		return m.TargetAccAddress
	}
	return ""
}

func (m *QueryCreateStorageKeyRequest) GetReferenceId() string {
	if m != nil {
		return m.ReferenceId
	}
	return ""
}

type QueryCreateStorageKeyResponse struct {
	StorageKey string `protobuf:"bytes,1,opt,name=storageKey,proto3" json:"storageKey,omitempty"`
}

func (m *QueryCreateStorageKeyResponse) Reset()         { *m = QueryCreateStorageKeyResponse{} }
func (m *QueryCreateStorageKeyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCreateStorageKeyResponse) ProtoMessage()    {}
func (*QueryCreateStorageKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29bfc094683f5c79, []int{5}
}
func (m *QueryCreateStorageKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCreateStorageKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCreateStorageKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCreateStorageKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCreateStorageKeyResponse.Merge(m, src)
}
func (m *QueryCreateStorageKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCreateStorageKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCreateStorageKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCreateStorageKeyResponse proto.InternalMessageInfo

func (m *QueryCreateStorageKeyResponse) GetStorageKey() string {
	if m != nil {
		return m.StorageKey
	}
	return ""
}

type QueryCreateReferencePayloadLinkRequest struct {
	ReferenceId string `protobuf:"bytes,1,opt,name=referenceId,proto3" json:"referenceId,omitempty"`
	PayloadHash string `protobuf:"bytes,2,opt,name=payloadHash,proto3" json:"payloadHash,omitempty"`
}

func (m *QueryCreateReferencePayloadLinkRequest) Reset() {
	*m = QueryCreateReferencePayloadLinkRequest{}
}
func (m *QueryCreateReferencePayloadLinkRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCreateReferencePayloadLinkRequest) ProtoMessage()    {}
func (*QueryCreateReferencePayloadLinkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29bfc094683f5c79, []int{6}
}
func (m *QueryCreateReferencePayloadLinkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCreateReferencePayloadLinkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCreateReferencePayloadLinkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCreateReferencePayloadLinkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCreateReferencePayloadLinkRequest.Merge(m, src)
}
func (m *QueryCreateReferencePayloadLinkRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCreateReferencePayloadLinkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCreateReferencePayloadLinkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCreateReferencePayloadLinkRequest proto.InternalMessageInfo

func (m *QueryCreateReferencePayloadLinkRequest) GetReferenceId() string {
	if m != nil {
		return m.ReferenceId
	}
	return ""
}

func (m *QueryCreateReferencePayloadLinkRequest) GetPayloadHash() string {
	if m != nil {
		return m.PayloadHash
	}
	return ""
}

type QueryCreateReferencePayloadLinkResponse struct {
	ReferenceKey   string `protobuf:"bytes,1,opt,name=referenceKey,proto3" json:"referenceKey,omitempty"`
	ReferenceValue string `protobuf:"bytes,2,opt,name=referenceValue,proto3" json:"referenceValue,omitempty"`
}

func (m *QueryCreateReferencePayloadLinkResponse) Reset() {
	*m = QueryCreateReferencePayloadLinkResponse{}
}
func (m *QueryCreateReferencePayloadLinkResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCreateReferencePayloadLinkResponse) ProtoMessage()    {}
func (*QueryCreateReferencePayloadLinkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29bfc094683f5c79, []int{7}
}
func (m *QueryCreateReferencePayloadLinkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCreateReferencePayloadLinkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCreateReferencePayloadLinkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCreateReferencePayloadLinkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCreateReferencePayloadLinkResponse.Merge(m, src)
}
func (m *QueryCreateReferencePayloadLinkResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCreateReferencePayloadLinkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCreateReferencePayloadLinkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCreateReferencePayloadLinkResponse proto.InternalMessageInfo

func (m *QueryCreateReferencePayloadLinkResponse) GetReferenceKey() string {
	if m != nil {
		return m.ReferenceKey
	}
	return ""
}

func (m *QueryCreateReferencePayloadLinkResponse) GetReferenceValue() string {
	if m != nil {
		return m.ReferenceValue
	}
	return ""
}

type QueryVerifySignatureRequest struct {
	ReferenceId      string `protobuf:"bytes,1,opt,name=referenceId,proto3" json:"referenceId,omitempty"`
	TargetAccAddress string `protobuf:"bytes,2,opt,name=targetAccAddress,proto3" json:"targetAccAddress,omitempty"`
}

func (m *QueryVerifySignatureRequest) Reset()         { *m = QueryVerifySignatureRequest{} }
func (m *QueryVerifySignatureRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVerifySignatureRequest) ProtoMessage()    {}
func (*QueryVerifySignatureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29bfc094683f5c79, []int{8}
}
func (m *QueryVerifySignatureRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifySignatureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifySignatureRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifySignatureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifySignatureRequest.Merge(m, src)
}
func (m *QueryVerifySignatureRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifySignatureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifySignatureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifySignatureRequest proto.InternalMessageInfo

func (m *QueryVerifySignatureRequest) GetReferenceId() string {
	if m != nil {
		return m.ReferenceId
	}
	return ""
}

func (m *QueryVerifySignatureRequest) GetTargetAccAddress() string {
	if m != nil {
		return m.TargetAccAddress
	}
	return ""
}

type QueryVerifySignatureResponse struct {
	Signature   string `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Algorithm   string `protobuf:"bytes,2,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	Certificate string `protobuf:"bytes,3,opt,name=certificate,proto3" json:"certificate,omitempty"`
	Timestamp   string `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Valid       string `protobuf:"bytes,5,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (m *QueryVerifySignatureResponse) Reset()         { *m = QueryVerifySignatureResponse{} }
func (m *QueryVerifySignatureResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVerifySignatureResponse) ProtoMessage()    {}
func (*QueryVerifySignatureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29bfc094683f5c79, []int{9}
}
func (m *QueryVerifySignatureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifySignatureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifySignatureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifySignatureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifySignatureResponse.Merge(m, src)
}
func (m *QueryVerifySignatureResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifySignatureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifySignatureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifySignatureResponse proto.InternalMessageInfo

func (m *QueryVerifySignatureResponse) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *QueryVerifySignatureResponse) GetAlgorithm() string {
	if m != nil {
		return m.Algorithm
	}
	return ""
}

func (m *QueryVerifySignatureResponse) GetCertificate() string {
	if m != nil {
		return m.Certificate
	}
	return ""
}

func (m *QueryVerifySignatureResponse) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *QueryVerifySignatureResponse) GetValid() string {
	if m != nil {
		return m.Valid
	}
	return ""
}

type QueryGetAccountInfoRequest struct {
	AccAddressString string `protobuf:"bytes,1,opt,name=accAddressString,proto3" json:"accAddressString,omitempty"`
}

func (m *QueryGetAccountInfoRequest) Reset()         { *m = QueryGetAccountInfoRequest{} }
func (m *QueryGetAccountInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAccountInfoRequest) ProtoMessage()    {}
func (*QueryGetAccountInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29bfc094683f5c79, []int{10}
}
func (m *QueryGetAccountInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAccountInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAccountInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAccountInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAccountInfoRequest.Merge(m, src)
}
func (m *QueryGetAccountInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAccountInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAccountInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAccountInfoRequest proto.InternalMessageInfo

func (m *QueryGetAccountInfoRequest) GetAccAddressString() string {
	if m != nil {
		return m.AccAddressString
	}
	return ""
}

type QueryGetAccountInfoResponse struct {
	AccAddress string `protobuf:"bytes,1,opt,name=accAddress,proto3" json:"accAddress,omitempty"`
	PubKey     string `protobuf:"bytes,2,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
}

func (m *QueryGetAccountInfoResponse) Reset()         { *m = QueryGetAccountInfoResponse{} }
func (m *QueryGetAccountInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAccountInfoResponse) ProtoMessage()    {}
func (*QueryGetAccountInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29bfc094683f5c79, []int{11}
}
func (m *QueryGetAccountInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAccountInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAccountInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAccountInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAccountInfoResponse.Merge(m, src)
}
func (m *QueryGetAccountInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAccountInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAccountInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAccountInfoResponse proto.InternalMessageInfo

func (m *QueryGetAccountInfoResponse) GetAccAddress() string {
	if m != nil {
		return m.AccAddress
	}
	return ""
}

func (m *QueryGetAccountInfoResponse) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

type QueryVerifyReferencePayloadLinkRequest struct {
	ReferenceId string `protobuf:"bytes,1,opt,name=referenceId,proto3" json:"referenceId,omitempty"`
	PayloadHash string `protobuf:"bytes,2,opt,name=payloadHash,proto3" json:"payloadHash,omitempty"`
}

func (m *QueryVerifyReferencePayloadLinkRequest) Reset() {
	*m = QueryVerifyReferencePayloadLinkRequest{}
}
func (m *QueryVerifyReferencePayloadLinkRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVerifyReferencePayloadLinkRequest) ProtoMessage()    {}
func (*QueryVerifyReferencePayloadLinkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29bfc094683f5c79, []int{12}
}
func (m *QueryVerifyReferencePayloadLinkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifyReferencePayloadLinkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifyReferencePayloadLinkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifyReferencePayloadLinkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifyReferencePayloadLinkRequest.Merge(m, src)
}
func (m *QueryVerifyReferencePayloadLinkRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifyReferencePayloadLinkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifyReferencePayloadLinkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifyReferencePayloadLinkRequest proto.InternalMessageInfo

func (m *QueryVerifyReferencePayloadLinkRequest) GetReferenceId() string {
	if m != nil {
		return m.ReferenceId
	}
	return ""
}

func (m *QueryVerifyReferencePayloadLinkRequest) GetPayloadHash() string {
	if m != nil {
		return m.PayloadHash
	}
	return ""
}

type QueryVerifyReferencePayloadLinkResponse struct {
	IsValid bool `protobuf:"varint,1,opt,name=isValid,proto3" json:"isValid,omitempty"`
}

func (m *QueryVerifyReferencePayloadLinkResponse) Reset() {
	*m = QueryVerifyReferencePayloadLinkResponse{}
}
func (m *QueryVerifyReferencePayloadLinkResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVerifyReferencePayloadLinkResponse) ProtoMessage()    {}
func (*QueryVerifyReferencePayloadLinkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29bfc094683f5c79, []int{13}
}
func (m *QueryVerifyReferencePayloadLinkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifyReferencePayloadLinkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifyReferencePayloadLinkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifyReferencePayloadLinkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifyReferencePayloadLinkResponse.Merge(m, src)
}
func (m *QueryVerifyReferencePayloadLinkResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifyReferencePayloadLinkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifyReferencePayloadLinkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifyReferencePayloadLinkResponse proto.InternalMessageInfo

func (m *QueryVerifyReferencePayloadLinkResponse) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

type QueryGetReferencePayloadLinkRequest struct {
	ReferenceId string `protobuf:"bytes,1,opt,name=referenceId,proto3" json:"referenceId,omitempty"`
}

func (m *QueryGetReferencePayloadLinkRequest) Reset()         { *m = QueryGetReferencePayloadLinkRequest{} }
func (m *QueryGetReferencePayloadLinkRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetReferencePayloadLinkRequest) ProtoMessage()    {}
func (*QueryGetReferencePayloadLinkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29bfc094683f5c79, []int{14}
}
func (m *QueryGetReferencePayloadLinkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReferencePayloadLinkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReferencePayloadLinkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReferencePayloadLinkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReferencePayloadLinkRequest.Merge(m, src)
}
func (m *QueryGetReferencePayloadLinkRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReferencePayloadLinkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReferencePayloadLinkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReferencePayloadLinkRequest proto.InternalMessageInfo

func (m *QueryGetReferencePayloadLinkRequest) GetReferenceId() string {
	if m != nil {
		return m.ReferenceId
	}
	return ""
}

type QueryGetReferencePayloadLinkResponse struct {
	ReferencePayloadLinkValue string `protobuf:"bytes,1,opt,name=referencePayloadLinkValue,proto3" json:"referencePayloadLinkValue,omitempty"`
}

func (m *QueryGetReferencePayloadLinkResponse) Reset()         { *m = QueryGetReferencePayloadLinkResponse{} }
func (m *QueryGetReferencePayloadLinkResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetReferencePayloadLinkResponse) ProtoMessage()    {}
func (*QueryGetReferencePayloadLinkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29bfc094683f5c79, []int{15}
}
func (m *QueryGetReferencePayloadLinkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReferencePayloadLinkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReferencePayloadLinkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReferencePayloadLinkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReferencePayloadLinkResponse.Merge(m, src)
}
func (m *QueryGetReferencePayloadLinkResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReferencePayloadLinkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReferencePayloadLinkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReferencePayloadLinkResponse proto.InternalMessageInfo

func (m *QueryGetReferencePayloadLinkResponse) GetReferencePayloadLinkValue() string {
	if m != nil {
		return m.ReferencePayloadLinkValue
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "chain4energy.c4echain.cfesignature.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "chain4energy.c4echain.cfesignature.QueryParamsResponse")
	proto.RegisterType((*QueryCreateReferenceIdRequest)(nil), "chain4energy.c4echain.cfesignature.QueryCreateReferenceIdRequest")
	proto.RegisterType((*QueryCreateReferenceIdResponse)(nil), "chain4energy.c4echain.cfesignature.QueryCreateReferenceIdResponse")
	proto.RegisterType((*QueryCreateStorageKeyRequest)(nil), "chain4energy.c4echain.cfesignature.QueryCreateStorageKeyRequest")
	proto.RegisterType((*QueryCreateStorageKeyResponse)(nil), "chain4energy.c4echain.cfesignature.QueryCreateStorageKeyResponse")
	proto.RegisterType((*QueryCreateReferencePayloadLinkRequest)(nil), "chain4energy.c4echain.cfesignature.QueryCreateReferencePayloadLinkRequest")
	proto.RegisterType((*QueryCreateReferencePayloadLinkResponse)(nil), "chain4energy.c4echain.cfesignature.QueryCreateReferencePayloadLinkResponse")
	proto.RegisterType((*QueryVerifySignatureRequest)(nil), "chain4energy.c4echain.cfesignature.QueryVerifySignatureRequest")
	proto.RegisterType((*QueryVerifySignatureResponse)(nil), "chain4energy.c4echain.cfesignature.QueryVerifySignatureResponse")
	proto.RegisterType((*QueryGetAccountInfoRequest)(nil), "chain4energy.c4echain.cfesignature.QueryGetAccountInfoRequest")
	proto.RegisterType((*QueryGetAccountInfoResponse)(nil), "chain4energy.c4echain.cfesignature.QueryGetAccountInfoResponse")
	proto.RegisterType((*QueryVerifyReferencePayloadLinkRequest)(nil), "chain4energy.c4echain.cfesignature.QueryVerifyReferencePayloadLinkRequest")
	proto.RegisterType((*QueryVerifyReferencePayloadLinkResponse)(nil), "chain4energy.c4echain.cfesignature.QueryVerifyReferencePayloadLinkResponse")
	proto.RegisterType((*QueryGetReferencePayloadLinkRequest)(nil), "chain4energy.c4echain.cfesignature.QueryGetReferencePayloadLinkRequest")
	proto.RegisterType((*QueryGetReferencePayloadLinkResponse)(nil), "chain4energy.c4echain.cfesignature.QueryGetReferencePayloadLinkResponse")
}

func init() { proto.RegisterFile("cfesignature/query.proto", fileDescriptor_29bfc094683f5c79) }

var fileDescriptor_29bfc094683f5c79 = []byte{
	// 969 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0x86, 0x26, 0xa5, 0xaf, 0x28, 0x94, 0x21, 0x50, 0x77, 0x49, 0x4d, 0x35, 0xa0, 0x82,
	0x22, 0xf0, 0xa8, 0xc1, 0x6a, 0x55, 0x84, 0x48, 0xe2, 0x22, 0xc5, 0x4d, 0x39, 0x04, 0x47, 0xe4,
	0xc0, 0xc5, 0x1a, 0xaf, 0xc7, 0x9b, 0x51, 0xec, 0x9d, 0xed, 0xec, 0x38, 0xc2, 0xb2, 0x72, 0xe1,
	0xc2, 0xb5, 0x12, 0x17, 0x7e, 0x06, 0x3f, 0xa3, 0x17, 0xa4, 0x48, 0x5c, 0x38, 0x45, 0x28, 0xe1,
	0xca, 0x7f, 0x40, 0x3b, 0xfb, 0x6c, 0xaf, 0xd7, 0x76, 0x6c, 0x27, 0x70, 0xcb, 0x7c, 0x3b, 0xef,
	0x7d, 0xdf, 0xf7, 0xe6, 0xe5, 0x3d, 0x19, 0x72, 0x5e, 0x43, 0x44, 0xd2, 0x0f, 0xb8, 0x69, 0x6b,
	0xc1, 0x5e, 0xb6, 0x85, 0xee, 0x14, 0x42, 0xad, 0x8c, 0x22, 0xd4, 0x3b, 0xe4, 0x32, 0x28, 0x8a,
	0x40, 0x68, 0xbf, 0x53, 0xf0, 0x8a, 0xc2, 0x9e, 0x0b, 0xe9, 0xfb, 0xee, 0xaa, 0xaf, 0x7c, 0x65,
	0xaf, 0xb3, 0xf8, 0xaf, 0x24, 0xd2, 0x5d, 0xf3, 0x95, 0xf2, 0x9b, 0x82, 0xf1, 0x50, 0x32, 0x1e,
	0x04, 0xca, 0x70, 0x23, 0x55, 0x10, 0xe1, 0xd7, 0x75, 0x4f, 0x45, 0x2d, 0x15, 0xb1, 0x1a, 0x8f,
	0x90, 0x90, 0x1d, 0x3f, 0xaa, 0x09, 0xc3, 0x1f, 0xb1, 0x90, 0xfb, 0x32, 0xb0, 0x97, 0xf1, 0xee,
	0xbd, 0x21, 0x75, 0x21, 0xd7, 0xbc, 0x85, 0x69, 0xe8, 0x2a, 0x90, 0xef, 0xe2, 0xe0, 0x3d, 0x0b,
	0x56, 0xc4, 0xcb, 0xb6, 0x88, 0x0c, 0xad, 0xc2, 0xbb, 0x43, 0x68, 0x14, 0xaa, 0x20, 0x12, 0xa4,
	0x0c, 0xcb, 0x49, 0x70, 0xce, 0x79, 0xe0, 0x7c, 0x7a, 0x7b, 0x63, 0xbd, 0x30, 0xdd, 0x5c, 0x21,
	0xc9, 0x51, 0xba, 0xf1, 0xfa, 0xec, 0xc3, 0x85, 0x0a, 0xc6, 0xd3, 0xa7, 0x70, 0xdf, 0x12, 0x3c,
	0xd3, 0x82, 0x1b, 0x51, 0x11, 0x0d, 0xa1, 0x45, 0xe0, 0x89, 0xe7, 0x75, 0x54, 0x40, 0x72, 0x70,
	0xd3, 0x8b, 0xbf, 0x29, 0x6d, 0xb9, 0x6e, 0x55, 0x7a, 0x47, 0x5a, 0x82, 0xfc, 0xa4, 0x50, 0x94,
	0xf9, 0x00, 0x6e, 0xeb, 0x01, 0x8c, 0xf1, 0x69, 0x88, 0x36, 0x61, 0x2d, 0x95, 0x63, 0xdf, 0x28,
	0xcd, 0x7d, 0xf1, 0x42, 0x74, 0x7a, 0xec, 0xeb, 0x70, 0xc7, 0x70, 0xed, 0x0b, 0xb3, 0xed, 0x79,
	0xdb, 0xf5, 0xba, 0x16, 0x51, 0x84, 0x69, 0x46, 0xf0, 0x2c, 0xdb, 0xe2, 0x28, 0xdb, 0xe6, 0x90,
	0xd9, 0x34, 0x1b, 0x0a, 0xce, 0x03, 0x44, 0x7d, 0x14, 0x89, 0x52, 0x08, 0x6d, 0xc2, 0xc3, 0x71,
	0x96, 0xf7, 0x78, 0xa7, 0xa9, 0x78, 0xfd, 0x5b, 0x19, 0x1c, 0xf5, 0x84, 0x4f, 0xb5, 0x1e, 0xdf,
	0x08, 0x93, 0xb8, 0x32, 0x8f, 0x0e, 0x7b, 0x72, 0x53, 0x10, 0x6d, 0xc3, 0x27, 0x53, 0xd9, 0x50,
	0x38, 0x85, 0xb7, 0xfa, 0xb9, 0x07, 0xd2, 0x87, 0x30, 0xf2, 0x10, 0x56, 0xfa, 0xe7, 0x03, 0xde,
	0x6c, 0x0b, 0xe4, 0xcc, 0xa0, 0xf4, 0x08, 0x3e, 0xb0, 0xb4, 0x07, 0x42, 0xcb, 0x46, 0x67, 0xbf,
	0xd7, 0x3f, 0xb3, 0x3b, 0x1b, 0xf7, 0x68, 0x8b, 0xe3, 0x1f, 0x8d, 0xfe, 0xe6, 0x60, 0x07, 0x8c,
	0xb0, 0xa1, 0xb3, 0x35, 0xb8, 0xd5, 0x6f, 0x61, 0x24, 0x1b, 0x00, 0xf1, 0x57, 0xde, 0xf4, 0x95,
	0x96, 0xe6, 0xb0, 0x85, 0x1c, 0x03, 0x20, 0x96, 0xea, 0x09, 0x6d, 0x64, 0x43, 0x7a, 0xdc, 0x88,
	0xdc, 0x1b, 0x89, 0xd4, 0x14, 0x14, 0xc7, 0x1b, 0xd9, 0x12, 0x91, 0xe1, 0xad, 0x30, 0x77, 0x23,
	0x89, 0xef, 0x03, 0x64, 0x15, 0x96, 0x8e, 0x79, 0x53, 0xd6, 0x73, 0x4b, 0xf6, 0x4b, 0x72, 0xa0,
	0x65, 0x70, 0xad, 0xe2, 0x1d, 0x6b, 0x44, 0xb5, 0x03, 0xf3, 0x3c, 0x68, 0xa8, 0x54, 0xc7, 0xf2,
	0xbe, 0xbd, 0x7d, 0xa3, 0x65, 0xe0, 0xf7, 0x3a, 0x36, 0x8b, 0xd3, 0xef, 0xb1, 0xd2, 0xd9, 0x4c,
	0x83, 0x6e, 0xe4, 0xd9, 0xb6, 0x4f, 0x21, 0xe4, 0x7d, 0x58, 0x0e, 0xdb, 0xb5, 0xf8, 0xb9, 0x13,
	0xe7, 0x78, 0xea, 0x77, 0x69, 0x52, 0xd2, 0xff, 0xbb, 0x4b, 0x9f, 0x61, 0x97, 0x5e, 0xc6, 0x86,
	0x86, 0x72, 0x70, 0x53, 0x46, 0x07, 0xb6, 0xa2, 0x31, 0xd5, 0x9b, 0x95, 0xde, 0x91, 0xee, 0xc0,
	0x47, 0xbd, 0x4a, 0x5c, 0x4b, 0x2f, 0xad, 0xc3, 0xc7, 0x97, 0x27, 0x42, 0x29, 0x5f, 0xc1, 0x3d,
	0x3d, 0xe6, 0x7b, 0xf2, 0x7f, 0x91, 0xe4, 0x9d, 0x7c, 0x61, 0xe3, 0xd5, 0x0a, 0x2c, 0x59, 0x1a,
	0xf2, 0xab, 0x03, 0xcb, 0xc9, 0x60, 0x25, 0x8f, 0x67, 0x19, 0xc2, 0xa3, 0x33, 0xde, 0x7d, 0x32,
	0x77, 0x5c, 0xe2, 0x81, 0xde, 0xff, 0xe9, 0x8f, 0xbf, 0x7f, 0x59, 0xbc, 0x4b, 0xde, 0x63, 0x5e,
	0x51, 0xb0, 0xec, 0x5e, 0x21, 0xa7, 0x0e, 0xbc, 0x33, 0x32, 0x9b, 0xc9, 0xf6, 0xcc, 0x6c, 0x93,
	0x56, 0x82, 0x5b, 0xba, 0x4e, 0x0a, 0xd4, 0x5e, 0xb4, 0xda, 0x0b, 0xe4, 0xb3, 0x8c, 0x76, 0xbb,
	0x5c, 0x44, 0xb5, 0x5f, 0xfa, 0xaa, 0xac, 0xb3, 0x2e, 0x6e, 0x9c, 0x13, 0x72, 0xe1, 0xc0, 0x9d,
	0xec, 0xf0, 0x26, 0x5b, 0x73, 0xca, 0x19, 0xd9, 0x32, 0xee, 0xf6, 0x35, 0x32, 0xa0, 0x9f, 0x5d,
	0xeb, 0xe7, 0x1b, 0x52, 0x1a, 0xef, 0x07, 0x77, 0x48, 0xf5, 0x48, 0x74, 0x58, 0x37, 0x3b, 0x04,
	0x4f, 0x58, 0x37, 0xd5, 0xc2, 0x27, 0xe4, 0xe7, 0x45, 0x70, 0x27, 0xcf, 0x7c, 0xb2, 0x7b, 0xd5,
	0xf2, 0x8f, 0xfe, 0x43, 0xb9, 0x2f, 0xfe, 0x93, 0x5c, 0x58, 0x83, 0x3d, 0x5b, 0x83, 0x5d, 0x52,
	0x9e, 0xf6, 0xa6, 0x38, 0x3e, 0xaa, 0x4d, 0x19, 0x1c, 0x0d, 0x7b, 0x67, 0xdd, 0xd4, 0x68, 0x39,
	0x21, 0x67, 0x0e, 0xbc, 0x9d, 0x59, 0x0c, 0x64, 0x73, 0x66, 0xc9, 0xe3, 0x17, 0x98, 0xbb, 0x75,
	0xf5, 0x04, 0x68, 0xb4, 0x6c, 0x8d, 0x96, 0xc8, 0x56, 0xc6, 0xe8, 0xb1, 0xbd, 0x5f, 0x1d, 0x00,
	0x19, 0x6f, 0x23, 0x0f, 0x4f, 0x7e, 0x77, 0x60, 0x65, 0x78, 0xfa, 0x93, 0xaf, 0x67, 0x96, 0x37,
	0x76, 0x01, 0xb9, 0x9b, 0x57, 0x8e, 0x47, 0x77, 0x5f, 0x5a, 0x77, 0x45, 0xb2, 0x91, 0x71, 0xe7,
	0x0b, 0x53, 0xe5, 0xc9, 0xfd, 0xaa, 0x0c, 0x1a, 0x8a, 0x75, 0xb3, 0x0b, 0x2d, 0x69, 0xdd, 0xc9,
	0x8b, 0x60, 0x8e, 0xd6, 0x9d, 0xba, 0xbb, 0xe6, 0x68, 0xdd, 0xe9, 0x9b, 0x69, 0x62, 0xeb, 0xe2,
	0x8b, 0x5e, 0xa1, 0x75, 0xff, 0x71, 0xe0, 0xee, 0x84, 0x25, 0x44, 0x76, 0xe6, 0x79, 0xa2, 0xcb,
	0x6a, 0x50, 0xbe, 0x7e, 0x22, 0x2c, 0xc0, 0xa6, 0x2d, 0xc0, 0x53, 0xf2, 0x64, 0xcc, 0xa3, 0xcf,
	0xe2, 0xbe, 0xb4, 0xf7, 0xfa, 0x3c, 0xef, 0x9c, 0x9e, 0xe7, 0x9d, 0xbf, 0xce, 0xf3, 0xce, 0xab,
	0x8b, 0xfc, 0xc2, 0xe9, 0x45, 0x7e, 0xe1, 0xcf, 0x8b, 0xfc, 0xc2, 0x0f, 0x8f, 0x7d, 0x69, 0x0e,
	0xdb, 0xb5, 0x82, 0xa7, 0x5a, 0x2c, 0x2d, 0x37, 0x66, 0xfa, 0xdc, 0x02, 0xec, 0x47, 0x36, 0xf4,
	0xc3, 0xc8, 0x74, 0x42, 0x11, 0xd5, 0x96, 0xed, 0x0f, 0xa3, 0x2f, 0xfe, 0x0d, 0x00, 0x00, 0xff,
	0xff, 0xd3, 0x86, 0xfe, 0xca, 0xd3, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of CreateReferenceId items.
	CreateReferenceId(ctx context.Context, in *QueryCreateReferenceIdRequest, opts ...grpc.CallOption) (*QueryCreateReferenceIdResponse, error)
	// Queries a list of CreateStorageKey items.
	CreateStorageKey(ctx context.Context, in *QueryCreateStorageKeyRequest, opts ...grpc.CallOption) (*QueryCreateStorageKeyResponse, error)
	// Queries a list of CreateReferencePayloadLink items.
	CreateReferencePayloadLink(ctx context.Context, in *QueryCreateReferencePayloadLinkRequest, opts ...grpc.CallOption) (*QueryCreateReferencePayloadLinkResponse, error)
	// Queries a list of VerifySignature items.
	VerifySignature(ctx context.Context, in *QueryVerifySignatureRequest, opts ...grpc.CallOption) (*QueryVerifySignatureResponse, error)
	// Queries a list of GetAccountInfo items.
	GetAccountInfo(ctx context.Context, in *QueryGetAccountInfoRequest, opts ...grpc.CallOption) (*QueryGetAccountInfoResponse, error)
	// Queries a list of VerifyReferencePayloadLink items.
	VerifyReferencePayloadLink(ctx context.Context, in *QueryVerifyReferencePayloadLinkRequest, opts ...grpc.CallOption) (*QueryVerifyReferencePayloadLinkResponse, error)
	// Queries a list of GetReferencePayloadLink items.
	GetReferencePayloadLink(ctx context.Context, in *QueryGetReferencePayloadLinkRequest, opts ...grpc.CallOption) (*QueryGetReferencePayloadLinkResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfesignature.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CreateReferenceId(ctx context.Context, in *QueryCreateReferenceIdRequest, opts ...grpc.CallOption) (*QueryCreateReferenceIdResponse, error) {
	out := new(QueryCreateReferenceIdResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfesignature.Query/CreateReferenceId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CreateStorageKey(ctx context.Context, in *QueryCreateStorageKeyRequest, opts ...grpc.CallOption) (*QueryCreateStorageKeyResponse, error) {
	out := new(QueryCreateStorageKeyResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfesignature.Query/CreateStorageKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CreateReferencePayloadLink(ctx context.Context, in *QueryCreateReferencePayloadLinkRequest, opts ...grpc.CallOption) (*QueryCreateReferencePayloadLinkResponse, error) {
	out := new(QueryCreateReferencePayloadLinkResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfesignature.Query/CreateReferencePayloadLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VerifySignature(ctx context.Context, in *QueryVerifySignatureRequest, opts ...grpc.CallOption) (*QueryVerifySignatureResponse, error) {
	out := new(QueryVerifySignatureResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfesignature.Query/VerifySignature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAccountInfo(ctx context.Context, in *QueryGetAccountInfoRequest, opts ...grpc.CallOption) (*QueryGetAccountInfoResponse, error) {
	out := new(QueryGetAccountInfoResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfesignature.Query/GetAccountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VerifyReferencePayloadLink(ctx context.Context, in *QueryVerifyReferencePayloadLinkRequest, opts ...grpc.CallOption) (*QueryVerifyReferencePayloadLinkResponse, error) {
	out := new(QueryVerifyReferencePayloadLinkResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfesignature.Query/VerifyReferencePayloadLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetReferencePayloadLink(ctx context.Context, in *QueryGetReferencePayloadLinkRequest, opts ...grpc.CallOption) (*QueryGetReferencePayloadLinkResponse, error) {
	out := new(QueryGetReferencePayloadLinkResponse)
	err := c.cc.Invoke(ctx, "/chain4energy.c4echain.cfesignature.Query/GetReferencePayloadLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of CreateReferenceId items.
	CreateReferenceId(context.Context, *QueryCreateReferenceIdRequest) (*QueryCreateReferenceIdResponse, error)
	// Queries a list of CreateStorageKey items.
	CreateStorageKey(context.Context, *QueryCreateStorageKeyRequest) (*QueryCreateStorageKeyResponse, error)
	// Queries a list of CreateReferencePayloadLink items.
	CreateReferencePayloadLink(context.Context, *QueryCreateReferencePayloadLinkRequest) (*QueryCreateReferencePayloadLinkResponse, error)
	// Queries a list of VerifySignature items.
	VerifySignature(context.Context, *QueryVerifySignatureRequest) (*QueryVerifySignatureResponse, error)
	// Queries a list of GetAccountInfo items.
	GetAccountInfo(context.Context, *QueryGetAccountInfoRequest) (*QueryGetAccountInfoResponse, error)
	// Queries a list of VerifyReferencePayloadLink items.
	VerifyReferencePayloadLink(context.Context, *QueryVerifyReferencePayloadLinkRequest) (*QueryVerifyReferencePayloadLinkResponse, error)
	// Queries a list of GetReferencePayloadLink items.
	GetReferencePayloadLink(context.Context, *QueryGetReferencePayloadLinkRequest) (*QueryGetReferencePayloadLinkResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) CreateReferenceId(ctx context.Context, req *QueryCreateReferenceIdRequest) (*QueryCreateReferenceIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReferenceId not implemented")
}
func (*UnimplementedQueryServer) CreateStorageKey(ctx context.Context, req *QueryCreateStorageKeyRequest) (*QueryCreateStorageKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStorageKey not implemented")
}
func (*UnimplementedQueryServer) CreateReferencePayloadLink(ctx context.Context, req *QueryCreateReferencePayloadLinkRequest) (*QueryCreateReferencePayloadLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReferencePayloadLink not implemented")
}
func (*UnimplementedQueryServer) VerifySignature(ctx context.Context, req *QueryVerifySignatureRequest) (*QueryVerifySignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySignature not implemented")
}
func (*UnimplementedQueryServer) GetAccountInfo(ctx context.Context, req *QueryGetAccountInfoRequest) (*QueryGetAccountInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountInfo not implemented")
}
func (*UnimplementedQueryServer) VerifyReferencePayloadLink(ctx context.Context, req *QueryVerifyReferencePayloadLinkRequest) (*QueryVerifyReferencePayloadLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyReferencePayloadLink not implemented")
}
func (*UnimplementedQueryServer) GetReferencePayloadLink(ctx context.Context, req *QueryGetReferencePayloadLinkRequest) (*QueryGetReferencePayloadLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferencePayloadLink not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfesignature.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CreateReferenceId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCreateReferenceIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CreateReferenceId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfesignature.Query/CreateReferenceId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CreateReferenceId(ctx, req.(*QueryCreateReferenceIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CreateStorageKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCreateStorageKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CreateStorageKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfesignature.Query/CreateStorageKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CreateStorageKey(ctx, req.(*QueryCreateStorageKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CreateReferencePayloadLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCreateReferencePayloadLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CreateReferencePayloadLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfesignature.Query/CreateReferencePayloadLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CreateReferencePayloadLink(ctx, req.(*QueryCreateReferencePayloadLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VerifySignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVerifySignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerifySignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfesignature.Query/VerifySignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerifySignature(ctx, req.(*QueryVerifySignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAccountInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfesignature.Query/GetAccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAccountInfo(ctx, req.(*QueryGetAccountInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VerifyReferencePayloadLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVerifyReferencePayloadLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerifyReferencePayloadLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfesignature.Query/VerifyReferencePayloadLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerifyReferencePayloadLink(ctx, req.(*QueryVerifyReferencePayloadLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetReferencePayloadLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReferencePayloadLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetReferencePayloadLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain4energy.c4echain.cfesignature.Query/GetReferencePayloadLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetReferencePayloadLink(ctx, req.(*QueryGetReferencePayloadLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chain4energy.c4echain.cfesignature.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "CreateReferenceId",
			Handler:    _Query_CreateReferenceId_Handler,
		},
		{
			MethodName: "CreateStorageKey",
			Handler:    _Query_CreateStorageKey_Handler,
		},
		{
			MethodName: "CreateReferencePayloadLink",
			Handler:    _Query_CreateReferencePayloadLink_Handler,
		},
		{
			MethodName: "VerifySignature",
			Handler:    _Query_VerifySignature_Handler,
		},
		{
			MethodName: "GetAccountInfo",
			Handler:    _Query_GetAccountInfo_Handler,
		},
		{
			MethodName: "VerifyReferencePayloadLink",
			Handler:    _Query_VerifyReferencePayloadLink_Handler,
		},
		{
			MethodName: "GetReferencePayloadLink",
			Handler:    _Query_GetReferencePayloadLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cfesignature/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCreateReferenceIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCreateReferenceIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCreateReferenceIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCreateReferenceIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCreateReferenceIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCreateReferenceIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReferenceId) > 0 {
		i -= len(m.ReferenceId)
		copy(dAtA[i:], m.ReferenceId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReferenceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCreateStorageKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCreateStorageKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCreateStorageKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReferenceId) > 0 {
		i -= len(m.ReferenceId)
		copy(dAtA[i:], m.ReferenceId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReferenceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TargetAccAddress) > 0 {
		i -= len(m.TargetAccAddress)
		copy(dAtA[i:], m.TargetAccAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TargetAccAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCreateStorageKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCreateStorageKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCreateStorageKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StorageKey) > 0 {
		i -= len(m.StorageKey)
		copy(dAtA[i:], m.StorageKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StorageKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCreateReferencePayloadLinkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCreateReferencePayloadLinkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCreateReferencePayloadLinkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PayloadHash) > 0 {
		i -= len(m.PayloadHash)
		copy(dAtA[i:], m.PayloadHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PayloadHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReferenceId) > 0 {
		i -= len(m.ReferenceId)
		copy(dAtA[i:], m.ReferenceId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReferenceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCreateReferencePayloadLinkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCreateReferencePayloadLinkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCreateReferencePayloadLinkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReferenceValue) > 0 {
		i -= len(m.ReferenceValue)
		copy(dAtA[i:], m.ReferenceValue)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReferenceValue)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReferenceKey) > 0 {
		i -= len(m.ReferenceKey)
		copy(dAtA[i:], m.ReferenceKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReferenceKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerifySignatureRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifySignatureRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifySignatureRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TargetAccAddress) > 0 {
		i -= len(m.TargetAccAddress)
		copy(dAtA[i:], m.TargetAccAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TargetAccAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReferenceId) > 0 {
		i -= len(m.ReferenceId)
		copy(dAtA[i:], m.ReferenceId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReferenceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerifySignatureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifySignatureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifySignatureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Valid) > 0 {
		i -= len(m.Valid)
		copy(dAtA[i:], m.Valid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Valid)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Certificate) > 0 {
		i -= len(m.Certificate)
		copy(dAtA[i:], m.Certificate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Certificate)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Algorithm) > 0 {
		i -= len(m.Algorithm)
		copy(dAtA[i:], m.Algorithm)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Algorithm)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAccountInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAccountInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAccountInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccAddressString) > 0 {
		i -= len(m.AccAddressString)
		copy(dAtA[i:], m.AccAddressString)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AccAddressString)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAccountInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAccountInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAccountInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccAddress) > 0 {
		i -= len(m.AccAddress)
		copy(dAtA[i:], m.AccAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AccAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerifyReferencePayloadLinkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifyReferencePayloadLinkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifyReferencePayloadLinkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PayloadHash) > 0 {
		i -= len(m.PayloadHash)
		copy(dAtA[i:], m.PayloadHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PayloadHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReferenceId) > 0 {
		i -= len(m.ReferenceId)
		copy(dAtA[i:], m.ReferenceId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReferenceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerifyReferencePayloadLinkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifyReferencePayloadLinkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifyReferencePayloadLinkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsValid {
		i--
		if m.IsValid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReferencePayloadLinkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReferencePayloadLinkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReferencePayloadLinkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReferenceId) > 0 {
		i -= len(m.ReferenceId)
		copy(dAtA[i:], m.ReferenceId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReferenceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReferencePayloadLinkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReferencePayloadLinkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReferencePayloadLinkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReferencePayloadLinkValue) > 0 {
		i -= len(m.ReferencePayloadLinkValue)
		copy(dAtA[i:], m.ReferencePayloadLinkValue)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReferencePayloadLinkValue)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCreateReferenceIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCreateReferenceIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReferenceId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCreateStorageKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TargetAccAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ReferenceId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCreateStorageKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StorageKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCreateReferencePayloadLinkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReferenceId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PayloadHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCreateReferencePayloadLinkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReferenceKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ReferenceValue)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerifySignatureRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReferenceId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TargetAccAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerifySignatureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Algorithm)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Certificate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Valid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAccountInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccAddressString)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAccountInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerifyReferencePayloadLinkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReferenceId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PayloadHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerifyReferencePayloadLinkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsValid {
		n += 2
	}
	return n
}

func (m *QueryGetReferencePayloadLinkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReferenceId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReferencePayloadLinkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReferencePayloadLinkValue)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCreateReferenceIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCreateReferenceIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCreateReferenceIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCreateReferenceIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCreateReferenceIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCreateReferenceIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCreateStorageKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCreateStorageKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCreateStorageKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAccAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetAccAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCreateStorageKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCreateStorageKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCreateStorageKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCreateReferencePayloadLinkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCreateReferencePayloadLinkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCreateReferencePayloadLinkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayloadHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCreateReferencePayloadLinkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCreateReferencePayloadLinkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCreateReferencePayloadLinkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferenceKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferenceValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifySignatureRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifySignatureRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifySignatureRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAccAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetAccAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifySignatureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifySignatureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifySignatureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algorithm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Algorithm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Valid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAccountInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAccountInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAccountInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccAddressString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccAddressString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAccountInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAccountInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAccountInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifyReferencePayloadLinkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifyReferencePayloadLinkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifyReferencePayloadLinkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayloadHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifyReferencePayloadLinkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifyReferencePayloadLinkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifyReferencePayloadLinkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsValid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsValid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReferencePayloadLinkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReferencePayloadLinkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReferencePayloadLinkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReferencePayloadLinkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReferencePayloadLinkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReferencePayloadLinkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferencePayloadLinkValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferencePayloadLinkValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
